MESSAGE( STATUS "== SUMMARY ==" )

###########################################################
#                                                         #
# Print some results                                      #
#                                                         #
###########################################################
MESSAGE ( STATUS "Project ${PROJECT_NAME} version ${PROJECT_VERSION}")
# would be nice to print out Orca version for satellite projects
# for this we need an executable which is guaranteed to be installed.
# then we can run it with --version flag.
# IF ( NOT ORCA_MOTHERSHIP )
#     MESSAGE ( STATUS "Using Orca version ${ICE_VERSION}")
# ENDIF ( NOT ORCA_MOTHERSHIP )
MESSAGE ( STATUS "Using CMake version ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}")
MESSAGE ( STATUS "Using Ice version ${ICE_VERSION}")
MESSAGE ( STATUS "Will install to ${CMAKE_INSTALL_PREFIX}")

LIST ( LENGTH COMPONENT_LIST COMPONENT_LIST_LENGTH )
SET ( CL ${COMPONENT_LIST} )
MESSAGE ( STATUS "Will build ${COMPONENT_LIST_LENGTH} executables:" )
MESSAGE ( STATUS "${CL}" )

LIST ( LENGTH LIBRARY_LIST LIBRARY_LIST_LENGTH )
SET ( LL ${LIBRARY_LIST} )
MESSAGE ( STATUS "Will build ${LIBRARY_LIST_LENGTH} libraries:")
MESSAGE ( STATUS "${LL}" )

LIST ( LENGTH ITEM_LIST ITEM_LIST_LENGTH )
SET ( IL ${ITEM_LIST} )
MESSAGE ( STATUS "Will build ${ITEM_LIST_LENGTH} special items:")
MESSAGE ( STATUS "${IL}" )

# write configuration results to file
#WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "Autogenerated by CMake for Orca project" )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "Using Ice version ${ICE_VERSION}" )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "Will build ${COMPONENT_LIST_LENGTH} executables:" )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "${CL}" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "Will build ${LIBRARY_LIST_LENGTH} libraries:" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "${LL}" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "Will build ${ITEM_LIST_LENGTH} special items:" APPEND )
WRITE_FILE ( ${PROJECT_BINARY_DIR}/cmake_config_report.txt "${IL}" APPEND )

# SITE_NAME( DEFAULT_SITE_NAME )
# SET ( SITE ${DEFAULT_SITE_NAME} CACHE STRING "Dart build name" FORCE )
# MESSAGE( STATUS "DEBUG: Setting Dart site name to ${SITE}" )

# TODO: should respect possible prev settins to SITE and just append our info here
# alexm: turn off this feature for now until we figure out how to submit it properly
#SET( OLD_BUILDNAME ${BUILDNAME} )
#STRING( REGEX REPLACE " ([^>]*)" "" STRIPPED_BUILDNAME ${OLD_BUILDNAME} )
#MESSAGE( STATUS "DEBUG: old build name      :${OLD_BUILDNAME}" )
#MESSAGE( STATUS "DEBUG: stripped build name :${STRIPPED_BUILDNAME}" )

#SET ( BUILDNAME "${STRIPPED_BUILDNAME} (c-${COMPONENT_LIST_LENGTH} l-${LIBRARY_LIST_LENGTH})" CACHE STRING "Dart build name" FORCE )
#MESSAGE( STATUS "DEBUG: Setting Dart build name to ${BUILDNAME}" )

#
# Reset global lists of components, libraries, etc.
#
# MESSAGE ( STATUS "DEBUG: Resetting global component and library lists" )
SET ( DUMMY_LIST "" )
SET ( COMPONENT_LIST ${DUMMY_LIST} CACHE STRING "Global list of components to build" FORCE )
SET ( LIBRARY_LIST ${DUMMY_LIST} CACHE STRING "Global list of libraries to build" FORCE )
SET ( ITEM_LIST ${DUMMY_LIST} CACHE STRING "Global list of special items to build" FORCE )
