/*
 * Auto-generated by CMake.
 * Do not modify or commit to source repository.
 */

#include "component.h"
#include "mainthread.h"
#include <orcaice/proputils.h>

using namespace ${COMP_NAMESPACE};

Component::Component()
    : orcaice::Component( "${COMP_NAME}", ${COMP_INTERFACE_FLAG}, ${COMP_ADAPTER_POLICY} )
{
}

void
Component::start()
{
    mainThread_ = new MainThread( context() );
    mainThread_->start();
}

void
Component::stop()
{
    context().tracer().debug( "stopping main thread", 5 );
    gbxiceutilacfr::stopAndJoin( mainThread_ );
    context().tracer().debug( "stopped main thread", 5 );

    // now that the main thread is stopped we can forget about it
    // once this smart pointer is reset, main thread can destruct itself and release all resources
    // (it's important to do it now if the thread has instances of ConsumerImpl,
    // they will unsubscribe from IceStorm in destructor)
    mainThread_ = 0;
}
