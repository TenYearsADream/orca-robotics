/*
 *  Orca Project: Components for robotics.
 *
 *  Copyright (C) 2004-2006
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_about About Orca

Orca is an open-source framework for developing component-based
robotic systems. It provides the means for defining and developing the
building-blocks which can be pieced together to form arbitrarily
complex robotic systems, from single vehicles to distributed sensor
networks.

<hr>

@section orca_doc_about_toc Contents

- @ref orca_doc_about_purpose
- @ref orca_doc_about_difference
- @ref orca_doc_about_approach
- @ref orca_doc_about_history
- @ref orca_doc_about_usage
- @ref orca_doc_about_platforms
- @ref orca_doc_about_license



@section orca_doc_about_purpose Purpose

Orca is an open-source framework for developing component-based robotic systems. It provides the means for defining and developing the building-blocks which can be pieced together to form arbitrarily
complex robotic systems, from single vehicles to distributed sensor networks. The project's goals are:
- to \b enable software reuse by defining a set commonly-used interfaces;
- to \b simplify software reuse by providing libraries with a high-level convenient API; and
- to \b encourage software reuse by maintaining a repository of components.

@section orca_doc_about_difference What Makes Orca Different?

Orca, currently in its second generation, differs from other robotic software frameworks in that it:
- adopts a Component-Based Software Engineering approach;
- uses  an industrial-strength library (Ice) for communication and interface definition;
- aims to be general, flexible and extensible, in order to place as few constraints as possible on system design;
- provides optional tools to assist in the development of individual components and the management of large systems; and
- maintains a repository of free, reusable components.

@section orca_doc_about_approach Approach

The approach we take is frequently called Component-Based Software Engineering (CBSE). For an overview of CBSE and its application to robotics, see <a href="http://orca-robotics.sf.net/documents/brooks05_towards_component_based_robotics.pdf">this paper</a>.  While it was written for Orca1, the arguments for CBSE fully apply to Orca2.

@subsection orca_doc_about_whyice Why Use Ice?

In order to implement a distributed component-based system, one needs
some kind of <a href="http://en.wikipedia.org/wiki/Middleware">middleware</a> package
to enable inter-component communication.  If support for C/C++ on
Linux is a requirement (which discounts Microsoft's COM+ and Sun's
Enterprise JavaBeans), the following options exist today:

- using XML-based technologies such as SOAP,
- using CORBA,
- writing custom middleware from scratch, or
- using <a href="http://www.zeroc.com">Ice</a>.

We discount XML-based technologies on the grounds that they are too
inefficient for low-level robotic control tasks.  

While CORBA is sufficiently flexible for Orca's middleware
requirements, it is also large and complex.  Experience with CORBA in
Orca1 showed this complexity to be problematic.  Ice is far less
complex: for a detailed comparison see <a href="http://www.zeroc.com/iceVsCorba.html">here</a> or <a href="www.triodia.com/staff/michi/ieee/ieee.pdf">here</a>.

Orca1 also experimented with writing custom middleware from scratch.
While communicating over a socket is simple, implementing middleware
sufficiently flexible and reliable to support Orca's requirements
involved re-implementing (and maintaining) large parts of CORBA
functionality, which is a non-trivial task.  It is unrealistic to
expect robotics researchers to have the time or skills to develop
middleware to the same standards as experienced middleware
professionals such as the developers of Ice.

We have been very pleased with Ice so far: it's easy enough to
understand that we managed to get a system working fairly quickly, and
we've become confident in its reliability.


@subsection orca_doc_about_flexible General, Flexible and Extensible

Orca aims to be as broadly applicable as possible by making as few
assumptions as possible.  In particular, we make no assumptions about:

- Architecture: system developers are free to compose a system from
  any set of components, arranged to form arbitrary architectures, so
  long as interfaces are connected correctly. There is no special
  component which the framework requires all systems to incorporate.

- Interfaces: individual components are free to provide or
  require any set of interfaces. There is no particular interface
  which all components must provide or require, and it is easy for component
  developers to invent new interfaces.

- Internals: component developers are free to provide the
  implementations of their components' interfaces (which are opaque
  to the rest of the system) in any way they choose.

The main only thing we prescribe is the way in which interfaces are
defined and implemented (using Ice), in order to enforce component
compatibility.


@subsection orca_doc_about_tools Optional Tools

While we avoid enforcing particular design patterns for either systems
or components, we do provide guidelines (and working code!) for
designs that have worked well in the past.

For developing individual components, most of these established design
patterns are encoded in <a href="group__orca__utility__orcaiceutilcpp.html">libOrcaIceUtil</a>.
We find it useful -- if you do too then go ahead and use it.  But feel
free to copy it and modify it (or not use it at all) as required.


@subsection orca_doc_about_repository The Component Repository

We recognise that the usefulness of both the framework and any
particular component increases with the variety and quality of the
available components with which one can interact.  We therefore
maintain <a href="group__components.html">this online repository</a>.
Users are encouraged to contribute their own components and to point
out omissions in components' documentation.


@section orca_doc_about_history History

Orca began as part of the EU-funded OROCOS Project: a project
to develop an Open-Source Robotic Control System.  The project
was a collaboration between four universities: <a href="http://www.cas.kth.se">KTH</a> (Sweden),
Leuven (Belgium), LAAS (France) and Ulm (Germany).  The four
institution worked on separate parts of a project that was
intended to eventually merge, but never did.  The Orocos name
now refers to <a href="http://www.orocos.org">the Belgian part</a>.

The task of <a href="http://www.cas.kth.se">KTH</a> was to build a set of communication patterns to enable
the interaction of distributed components.  This work,
spearheaded by Anders Oreb&auml;ck, was called Orocos\@KTH.  By
June 2004 Orocos\@KTH had also been adopted by members of the <a href="http://www.acfr.usyd.edu.au">Australian Centre for Field Robotics</a>.  By this time it had diverged far enough from the work at Leuven that a new name was required to disambiguate the two, and Orca1 was born. At that time the project moved to SourceForge. Work on porting Orca to Ice started in March of 2005. The new version called Orca2 was forked in late 2005, the main difference being the move to @ref orca_doc_about_whyice "Ice" as the sole communications package.

@section orca_doc_about_usage Usage

Orca is currently used and/or actively developed at the following sites:

- <a href="http://www.cas.kth.se">KTH</a>
          (Stockholm, Sweden)

- <a href="http://www.acfr.usyd.edu.au">Australian Centre for Field Robotics</a>
        (Sydney, Australia)

- <a href="http://www.uts.edu.au" target="_blank">University of Technology Sydney</a> 
    (Sydney, Australia)

- <a href="http://www.cse.unsw.edu.au/index.html">University of New South Wales</a>
    (Sydney, Australia)

@section orca_doc_about_platforms Operating Systems and Languages

Orca was designed with the intention of being used on various
platforms.  To this end, Orca uses <a href="www.cmake.org">CMake</a> (cross-platform make) for its
build system.  Ice has language mappings for C++, Java, Python, C#, VisualBasic and PHP.  It builds natively under various operating systems including Windows, Linux and Mac OS X.

@section orca_doc_about_license License

Orca is released under the <a href="http://www.fsf.org/copyleft/lgpl.html">GNU Lesser General Public License (LGPL)</a>.

The LGPL was chosen (as opposed to the GPL) to allow commercial
enterprises to build closed-source products using Orca technology.
Note that Orca's only required dependency, Ice, is released under a <a href="http://www.zeroc.com/licensing.html">dual license</a>: it is GPL
unless a commercial license is purchased from <a href="http://www.zeroc.com">ZeroC</a>.

*/
