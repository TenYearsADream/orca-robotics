/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_configfiles Orca Configuration Files

@note Reviewed for release 2.9.0.

This page describes everything you need to know about writing and using Orca config files.

- @ref orca_doc_configfiles_order
- @ref orca_doc_configfiles_format
- @ref orca_doc_configfiles_write
  - @ref orca_doc_configfiles_write_user
  - @ref orca_doc_configfiles_write_developer
- @ref orca_doc_configfiles_usage
  - @ref orca_doc_configfiles_connection
  - @ref orca_doc_configfiles_config

@section orca_doc_configfiles_order Sources, Priorities, and Order of Loading

Configuration parameters can come from 5 different sources, in any combination. The possible sources are listed here in the order of decreasing generality and increasing priority (i.e. the later more specific sources overwrite the earlier more general ones). At runtime, the properties are loaded in reverse order so that the property @e values from more specific sources (e.g. from the command line) can specify the @e address of the more general sources (e.g. the location of the global config file). Despite the reverse loading order, the priorities are of course preserved.

-# Built-in ("factory") defaults
    - These are hard-wired into the code of commonly-used libraries and the individual components. The library and component documentation should specify default values. (See for example @ref orca_library_orcaice_config "configuration parameters for libOrcaIce)
-# Over the network, from a remote interface. Only properties beginning with the component tag can be set using this method. The remote interface proxy (direct or indirect) is specified in one of 2 ways:
    -# The contents of @c Orca.NetworkConfig parameter (supplied by any of the sources below), e.g.
@verbatim
Orca.NetworkConfig=properties@local/propertyserver
@endverbatim
    -# Default value: none. Network configuration properties are not used if the proxy is not specified explicitely.
-# From a global configuration file. The path to the file (absolute or relative) is specified in one of 3 ways (we use the first one we find):
    -# The contents of @c Orca.GlobalConfig parameter (supplied by any of the sources below), e.g.
@verbatim
$ ls *.cfg
global.cfg
$ mycomponent --Orca.GlobalConfig=global.cfg
@endverbatim
    -# The contents of @c ORCA_GLOBAL_CONFIG environment variable
@verbatim
$ ls *.cfg
global.cfg
$ export ORCA_GLOBAL_CONFIG=global.cfg
$ mycomponent
@endverbatim
    -# Default value, platform-dependent:
        - Linux: File @c $HOME/.orcarc
@verbatim
$ ls $HOME/.orcarc
/home/myname/.orcarc
$ mycomponent
@endverbatim
        - Win32: File @c C:\\orca.ini
-# From a component configuration file. The path to the file (absolute or relative) is specified in one of 4 ways (we use the first one we find):
    -# The contents of @c Orca.Config parameter (supplied by any of the sources below), e.g.
@verbatim
$ ls *.cfg
local.cfg
$ mycomponent --Orca.Config=local.cfg
@endverbatim
    -# The contents of @c Ice.Config parameter (supplied by any of the sources below), e.g.
@verbatim
$ ls *.cfg
local.cfg
$ mycomponent --Ice.Config=local.cfg
@endverbatim
We parse Ice.Config for compatibility with IceGrid. In manually-written files this option should not be used to avoid confusion.
    -# The command line argument, when there is only 1 argument.
@verbatim
$ ls *.cfg
local.cfg
$ mycomponent local.cfg
@endverbatim
    -# File @c ./mycomponent.cfg when the component @c mycomponent is executed with no command line arguments.
@verbatim
$ ls *.cfg
mycomponent.cfg
$ mycomponent
@endverbatim
-# Command-line arguments.  Any property can be specified on the command line by prepending "--" to it. For example, your component's config file has the following property @c MyComponent.Config.MaxSpeed=50. You can change the effective value with a command-line option. (Note that we have to specify the config file name explicitely because the special cases of 4b and 4c no longer apply.)
@verbatim
$ mycomponent --Orca.Config=local.cfg --MyComponent.Config.MaxSpeed=500 
@endverbatim

@note To avoid unexpected interactions between Ice runtime and Orca libraries, do @b not define ICE_CONFIG environment variable.

@section orca_doc_configfiles_format File Format

Orca uses Ice utilities to parse configuration files. Therefore, we use the same format as the Ice configuration files. 

Config files are text files which list properties as key/value pairs. Each key/value pair is placed on a new line. Keys and values are strings which are separated by an equal sign ('='). The key strings are @e optionally devided into subfields with periods (aka dots, '.'). The value strings can represent strings, integers, or floats. Boolean variables are by convention stored as {0,1}. Comments are marked with '#'. For example:

@verbatim
Parameter=1
Parameter.Subfield="orca"
# This line is ignored
Parameter.Subfield.Whatever=123.4
@endverbatim

For more information on Ice properties and configuration files, see chapter "Ice Properties and Configuration" of the <a href="http://www.zeroc.com/download.html#doc" target="_blank">Ice manual</a>.

@section orca_doc_configfiles_write Writing Configuration Files

The configuration files are viewed slightly differently by the component user and the component developer.

@subsection orca_doc_configfiles_write_user From the User's Perspective

Typically, an Orca component has a definition file (file extention @c def) in the source tree and the configuration file (file extention @c cfg) is generated from it during compilation. The automatically generated @c cfg file is installed into [ORCA-INSTALL-DIR]/cfg/ directory.

To use a @c cfg file in your system, make a copy of the auto-generated @c mycomponent.cfg file and customize it to fit the needs of your system.
@verbatim
$ mkdir -p ~/sys/mysystem; cd ~/sys/mysystem
$ cp [ORCA-INSTALL-DIR]/cfg/somecomponent.cfg .
$ vi somecomponent.cfg
$ somecomponent somecomponent.cfg
@endverbatim

@subsection orca_doc_configfiles_write_developer From the Developer's Perspective

Orca configuration files (file extention @c cfg) are typically generated from component definition files (file extention @c def). This is the recommended method becauses it reduces workload and minimizes chances of error. The format for definition files is documented within a dedicated library @ref orca_library_orcadef.

The configuration file @c mycomponent.cfg file can be generated from the corresponding @c def file in two ways:
 - manually at any time, using the @c generatecfg utility:
@verbatim
$ generatecfg component.def mycomponent.cfg
@endverbatim
 - automatically during compilation, by including the following line in the component's CMakeLists.txt file
@verbatim
GENERATE_CONFIG_FILE( mycomponent.def )
@endverbatim

The hand-written @c def file is installed into [ORCA-INSTALL-DIR]/def/ directory. The auto-generated @c cfg file is installed into [ORCA-INSTALL-DIR]/cfg/ directory.

@section orca_doc_configfiles_usage Usage

Configuration files have two uses:

- @ref orca_doc_configfiles_connection
- @ref orca_doc_configfiles_config

@subsection orca_doc_configfiles_connection Connecting Components

First, we look at a component with provided interfaces (acting as a server).

@verbatim
COMP_TAG.Platform=p1
COMP_TAG.Component=c1
COMP_TAG.Endpoints=e1

# Provided interfaces
COMP_TAG.Provides.IFACE_TAG1.Name=i1
COMP_TAG.Provides.IFACE_TAG2.Name=i2
...
@endverbatim

The fragment above contains two kinds of @e tags:

@b COMP_TAG (string)
- All component settings are prefixed with a string which we call here 'COMP_TAG'. This is done to distinguish one component's setting from the other's and from other possible settings, e.g. Ice runtime parameters which start with 'Ice', 'IceStorm', etc.
- Valid values: 
    - all characters, except '.'
    - must be unique within one config file
    - has to match the string hard-wired into the component's source code.

@b IFACE_TAG (string)
- Settings for different interfaces are distinguished by using tags.
- Valid values: 
    - all characters, except '.'
    - must be unique within one component's settings
    - has to match the string hard-wired into the component's source code.

Now we go through the @e keys of the fragment (the text on the left of the "=" sign):

@b COMP_TAG.Platform (string)
- Platform name. Used for registering with the registry. 
- Valid values:
    - all characters, except '@' and '/'
    - combination with component name must be unique within the system
- Default: "local"

@b COMP_TAG.Component (string)
- Component name. Used for registering with the registry. 
- Valid values:
    - all characters, except '@' and '/'
    - combination with platform name must be unique within the system
- Default: the value of COMP_TAG converted to lower case.

@b COMP_TAG.Endpoints (string)
- The communication endpoints at which the component will accept connections.
- Valid values: 
    - standard Ice endpoint specification. 
    - to allow direct connections, host name and port number must be specified.
- Default: "tcp -t 5000"

@b COMP_TAG.Provides.IFACE_TAG.Name (string)
- The interface name. Used for registering with the registry. 
- Valid values:
    - all characters, except '@' and '/'
    - must be unique within an Orca component

Orca defines the following naming rules:

@e fully-qualified @e component @e name
    - formed from platform and component names as follows: @c Platform/Component
    - Example: \e "p1/c1". 
    - Must be unique within the system. (If the same registry is used by multiple system, the combination must be unique across all systems involved.)

@e fully-qualified @e interface @e name
    - formed from platform, component, and interface names as follows: @c Interface\@Platform/Component
    - Example: \e "i1\@p1/c1" and \e "i2\@p1/c1". 

@e fully-qualified @e interface @e address
    - formed from interface name and the component endpoint as follows: @c Interface:Endpoint
    - Example: \e "i1:e1" and \e "i2:e1"
    - am: does it work with multiple endpoints?

Now lets look at configuring the second component which will connect to the first.

@verbatim
COMP_TAG.Platform=p2
COMP_TAG.Component=c2

# Required interfaces

# Direct binding by specifying the address (endpoint)
COMP_TAG.Requires.IFACE_TAG1.Proxy=i1:e1

# Indirect binding by looking up the address through the Registry
COMP_TAG.Requires.IFACE_TAG2.Proxy=i2@p1/c1
...
@endverbatim

As you can see, there are two options for connecting interfaces: 

- direct connection
    - Must specify a fully-qualified interface address.
    - Example: @e "i1:e1"
    - (The Registry is not used)

- indirect connection
    - Must specify a fully-qualified interface name.
    - Example: @e "i2@p1/c1"
    - When the component is initialized, it contacts the Registry with the name of the required interface. The Registry returns the address of the 2nd provided interface of the component above.

Of course, the same component may have provided and required interfaces. The order of declaring interfaces is not important. Here's a complete example for a component which has provided and required interfaces.
@verbatim
LocalNav.Platform=local
LocalNav.Component=localnav

# Provided Interfaces
LocalNav.Provides.PathFollower2d.Name=pathfollower2d

# Required Interfaces
LocalNav.Requires.Localisation.Proxy=localise2d@local/faithlocaliser
LocalNav.Requires.Odometry2d.Proxy=odometry2d@local/robot2d
@endverbatim
With COMP_TAG=LocalNav and component endpoints set to default. Provided interfaces: IFACE_TAG=PathFollower2d. Required interfaces: IFACE_TAG1=Localisation, IFACE_TAG2=Odometry2d. 


@subsection orca_doc_configfiles_config Specifying Component's Internal Configuration Parameters

Components' internal behaviour usually needs to be configured at run time by setting certain parameters. The following syntax is used:

@verbatim
COMP_TAG.Config.SET_TAG1.PARAM_TAG1=0.1
COMP_TAG.Config.SET_TAG1.PARAM_TAG2=1
...
COMP_TAG.Config.SET_TAG2.PARAM_TAG3=left
...
@endverbatim

The code looks up the value of the parameter by its full key, e.g. COMP_TAG.Config.SET_TAG1.PARAM_TAG1. Repeated keys are allowed, the later values replacing earlier ones.

String used for set and parameter tags are arbitrary. Parameter sets and the depth of the hierarchy are completely optional.

The code can contain hard-coded default values in case the config file omits them or leaves the value empty. The auto-generated config files should contain all parameters listed with the corresponding default values. The defaults should also be specified in component's documentation.

Example:
@verbatim
LocalNav.Config.TestMode=0
LocalNav.Config.Test.BatchMode=0
LocalNav.Config.Test.NumWaypoints=10
LocalNav.Config.Vfh.AbsoluteMaxTurnrate=60
LocalNav.Config.Vfh.CellSize=0.1
@endverbatim

@section more_info For More Information.

Follow the steps of @ref orca_doc_quickstart. After you get the two components to communicate, you can examine the configuration files to see how connections are specified.

*/
