/*
 *  Orca-Base: Components for robotics.
 *
 *  Copyright (C) 2004
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_configfiles The Orca Configuration Files

\b NOTE: This is not implemented yet but will be soon.

Configuration files can be used for three things:
    - Configuring how components connect to each other
    - Setting internal component parameters
    - Describing the component structure

Orca uses Ice tools to parse configuration files. These are text files which list properties as key/value pairs. The keys are strings optionally devided into subfields with periods.

@section terms Terminology

When talking about how components connect to each other it's helpful to define some terminology.

A \em platform is a logical unit, a robot would typically be a platform. We use the term platform so not to exclude simple devices like cameras or PDA's. Calling them robots would be a stretch. Platforms are the highest level in our hierarchy, so we don't define teams for example.

Each platform can have one or several \em hosts -- physical computers. Each host may execute one or several \em components. Each component may have zero or more \em interfaces, some are required and some are provided.

These four terms are often used in describing a distributed system but one has to be careful to keep in mind that they refer to different aspects of the system. Platforms describe a logical grouping of hardware and software. This grouping is useful because it reflects physical proximity; cheap, fast, and reliable communication, etc. Hosts are units of computing hardware. Components and interfaces describe software organization. Assigning software (components) to hardware (hosts) is called deployment.

@image html hierarchy.png

@section connection Connecting Components

A component usually has a single config file which may also set some Ice runtime parameters which start with 'Ice', 'IceStorm', etc. We prefix all component settings with a string which we call here 'ComponentTag'. There are two rules about this tag: a) it must be unique within one config file, and b) it has to match the string hardwired into the source code. Let's look at an example.

@verbatim
ComponentTag.Platform=P1
ComponentTag.Component=C1
...
ComponentTag.Provides.InterfaceTag1.Interface=I1
ComponentTag.Provides.InterfaceTag2.Interface=I2
...
@endverbatim

Thsi component has two provided interfaces. When this component is initialized it registers them with the naming service (or the registry) under the following names: \e I1\@P1/C1 and \e I2\@P1/C1. The implementation of ZeroC's IcePackRegistry requires that the interface name must be unique withing an Orca component, and the combination of the platform and component names must be unique within the registy.

@verbatim
ComponentTag.Platform=P2
ComponentTag.Component=C2
...
ComponentTag.Requires.InterfaceTag1.Platform=P1
ComponentTag.Requires.InterfaceTag1.Component=C1
ComponentTag.Requires.InterfaceTag1.Interface=I1

ComponentTag.Requires.InterfaceTag1.Proxy=I1@P1/C1
...
@endverbatim

When the second component is initialized it looks up the interface it requires at the naming service under the name \e I1\@P1/C1. The registry returns the address of the first provided interface of the component above.

@section config Configurations

*/
