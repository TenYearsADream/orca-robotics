/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_configfiles Orca Configuration Files

@note Reviewed for release 2.0.0.

@section orca_doc_configfiles_order Order of Loading

Configuration parameters are loaded in this order, earlier sources overwritten by later once.

-# Built-in defaults
-# Global configuration file, specified in one of 3 ways (we use the first one we find):
    -# The contents of @c Orca.GlobalConfig parameter, e.g.
@verbatim
$ ls *.cfg
global.cfg
$ mycomponent --Orca.GlobalConfig=global.cfg
@endverbatim
    -# The contents of @c ORCA2_GLOBAL_CONFIG environment variable
@verbatim
$ ls *.cfg
global.cfg
$ export ORCA2_GLOBAL_CONFIG=global.cfg
$ mycomponent
@endverbatim
    -# Default file, platform-dependent:
        - Linux: File @c $HOME/.orcarc
@verbatim
$ ls $HOME/.orcarc
/home/myname/.orcarc
$ mycomponent
@endverbatim
        - Win32: File @c C:\\orca.ini
-# Component configuration file, specified in one of 3 ways (we use the first one we find):
    -# The contents of @c Orca.Config parameter
@verbatim
$ ls *.cfg
local.cfg
$ mycomponent --Orca.Config=local.cfg
@endverbatim
    -# The command line argument, when there is only 1 argument.
@verbatim
$ ls *.cfg
local.cfg
$ mycomponent local.cfg
@endverbatim
    -# File @c ./mycomponent.cfg when the component @c mycomponent is executed with no command line arguments.
@verbatim
$ ls *.cfg
mycomponent.cfg
$ mycomponent
@endverbatim
-# Command-line arguments

For example, the following ways of starting a component are equivalent:
@verbatim
$ export ORCA2_GLOBAL_CONFIG=global.cfg
$ mycomponent --Orca.Config=local.cfg --MyComponent.MaxSpeed=500
@endverbatim
@verbatim
$ mycomponent --Orca.GlobalConfig=global.cfg --Orca.Config=local.cfg --MyComponent.MaxSpeed=500
@endverbatim

@note To avoid unexpected interactions between Ice runtime and Orca libraries, do not define ICE_CONFIG environment variable.

@section orca_doc_configfiles_format File Format

Orca uses Ice utilities to parse configuration files. Config files are text files which list properties as key/value pairs. Keys and values are strings which are separated by an equal sign ('='). The key strings are optionally devided into subfields with periods (aka dots, '.'). The value strings can represent strings, integers, or floats. For example:

@verbatim
Parameter=1
Parameter.Subfield="orca"
Parameter.Subfield.Whatever=123.4
@endverbatim

For more information on Ice properties and configuration files, see chapter "Ice Properties and Configuration" of the <a href="http://www.zeroc.com/download.html#doc" target="_blank">Ice manual</a>.

@section orca_doc_configfiles_write Writing Configuration Files

Orca configuration files (file extention @c cfg) can be generated from component definition files (file extention @c def). This is the recommended method since writing configuration files by hand is error-prone. Here's the typical steps to generate @c mycomponent.cfg file:
-# write a @c mycomponent.def file (see @ref orca_utility_orcadef for its format)
-# generate @c mycomponent.cfg file using the @c generatecfg utility:
@verbatim
$ generatecfg component.def mycomponent.cfg
@endverbatim
-# make a copy of the generated @c mycomponent.cfg file and customize it to fit the needs of your system.

Typically, an Orca component has a @c def file in the source tree and the @c cfg file is generated during compilation. The hand-written @c def file is installed into [ORCA-INSTALL-DIR]/def/ directory. The automatically generated @c cfg file is installed into [ORCA-INSTALL-DIR]/cfg/ directory. The following line in the component's CMakeLists.txt file does the conversion:

@verbatim
GENERATE_FROM_DEF( mycomponent.def )
@endverbatim

@section orca_doc_configfiles_usage Usage

Configuration files have three uses:

- @ref orca_doc_configfiles_connection
- @ref orca_doc_configfiles_config
- Describing the component structure

@subsection orca_doc_configfiles_connection Connecting Components

A component usually has a single config file which may also set some Ice runtime parameters which start with 'Ice', 'IceStorm', etc. We prefix all component settings with a string which we call here 'ComponentTag'. There are two rules about this tag: a) it must be unique within one config file, and b) it has to match the string hardwired into the source code. Let's look at an example.

@verbatim
ComponentTag.Platform=p1
ComponentTag.Component=c1
ComponentTag.Endpoints=e1

# Provided interfaces
ComponentTag.Provides.InterfaceTag1.Name=i1
ComponentTag.Provides.InterfaceTag2.Name=i2
...
@endverbatim

This component has two provided interfaces. When this component is initialized it registers them with the registry under the following names: \e i1\@p1/c1 and \e i2\@p1/c1. The implementation of ZeroC's IceGrid Registry requires that the interface name must be unique within an Orca component, and the combination of the platform and component names must be unique within the registy.

@verbatim
ComponentTag.Platform=p2
ComponentTag.Component=c2

# Required interfaces

# Direct binding by specifying the endpoint
ComponentTag.Requires.InterfaceTag2.Proxy=i2:e2

# Indirect binding through the Registry
ComponentTag.Requires.InterfaceTag3.Proxy=i2@p2/c2
...
@endverbatim

When the second component is initialized it looks up the interface it requires at the naming service under the name \e i1\@p1/c1. The registry returns the address of the first provided interface of the component above. Because we use a slash '/' as a separator, it cannot be used in platform and component names. The \@ character is also not permitted.


@subsection orca_doc_configfiles_config Specifying Internal Configuration Parameters

Components' internal behaviour usually needs to be configured at run time by setting certain parameters. A component developer should write a defintion file ('.def') which contains all possible parameters with their default values. The syntax in the generated config file ('.cfg') is:

@verbatim
ComponentTag.Config.ParameterSet1.ParameterDouble=0.1
ComponentTag.Config.ParameterSet1.ParameterBool=1
...
ComponentTag.Config.ParameterSet2.ParameterInt=3
...
@endverbatim

The component developer is responsible for reading the parameters correctly. The code can contain hard-coded default values in case the config file does not specify them.

@section more_info For More Information.

Follow the steps of @ref orca_doc_quickstart. After you get the two components to communicate, you can examine the configuration files to see how connections are specified.

*/
