/*
 *  Orca-Base: Components for robotics.
 *
 *  Copyright (C) 2004
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_configfiles Orca Configuration Files

Configuration files can be used for three things:
    - @ref connection
    - @ref config
    - Describing the component structure

Orca uses Ice tools to parse configuration files. These are text files which list properties as key/value pairs. The keys are strings optionally devided into subfields with periods.

Orca configuration files ('.cfg') can be generated from Orca definition files ('.def'). This is the recommended method since writing configuration files by hand is very error-prone. A good way is to generate the cfg file using the standard def file and then make changes to the generated cfg file. The conversion is done by the 'generatecfg' utility:

@verbatim
$ generatecfg component.def mycomponent.cfg
@endverbatim

@section connection Connecting Components

A component usually has a single config file which may also set some Ice runtime parameters which start with 'Ice', 'IceStorm', etc. We prefix all component settings with a string which we call here 'ComponentTag'. There are two rules about this tag: a) it must be unique within one config file, and b) it has to match the string hardwired into the source code. Let's look at an example.

@verbatim
ComponentTag.Platform=p1
ComponentTag.Component=c1
...
ComponentTag.Provides.InterfaceTag1.Interface=i1
ComponentTag.Provides.InterfaceTag2.Interface=i2
...
@endverbatim

This component has two provided interfaces. When this component is initialized it registers them with the naming service (or the registry) under the following names: \e i1\@p1/c1 and \e i2\@p1/c1. The implementation of ZeroC's IcePackRegistry requires that the interface name must be unique withing an Orca component, and the combination of the platform and component names must be unique within the registy.

@verbatim
ComponentTag.Platform=p2
ComponentTag.Component=c2
...
ComponentTag.Requires.InterfaceTag1.Platform=p1
ComponentTag.Requires.InterfaceTag1.Component=c1
ComponentTag.Requires.InterfaceTag1.Interface=i1
...
@endverbatim

When the second component is initialized it looks up the interface it requires at the naming service under the name \e i1\@p1/c1. The registry returns the address of the first provided interface of the component above. Because we use a slash '/' as a separator, it cannot be used in platform and component names. The \@ sign is also not permitted.

@par A More Concise Alternative Syntax

Here's an alternative more concise syntax. This one takes precedence is both are present.

@verbatim
ComponentTag.AdapterId=p1/c1
...
ComponentTag.Provides.InterfaceTag1.Interface=i1
...
ComponentTag.Requires.InterfaceTag2.Proxy=i2@p2/c2
...
@endverbatim

@section config Internal Component Parameters

Components' internal behaviour usually needs to be configured by setting certain parameters. A component developer should write a defintion file ('.def') which contains all possible parameters with their default values. The syntax in the generated config file ('.cfg') is:

@verbatim
ComponentTag.Config.ParameterSet1.ParameterDouble=0.1
ComponentTag.Config.ParameterSet1.ParameterBool=1
...
ComponentTag.Config.ParameterSet2.ParameterInt=3
...
@endverbatim

The component developer is responsible for reading the parameters correctly. The code can contain hard-coded default values in case the config file does not specify them.
*/
