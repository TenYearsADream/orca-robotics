/*
 *  Orca Project: Components for robotics.
 *
 *  Copyright (C) 2004-2006
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_dart2 Automated Testing with Dart2

Dart2 is a rewrite of Dart -- the automated test facility which is part of CMake. The general goal is to make software more reliable by simplifying automated code (re)compilation and testing. Running Dart2 clients at different sites helps catch bugs caused by cross-platform and cross-hardware issues.

General things to note:
- @c cmake at least v2.2 is required
- It's best to do out-of-source build, i.e. all object/generated files are in one 'binary' directory. The reason is that it makes it simple for CTest to do a clean build every time by simply deleting all files in the build (or 'binary') directory.


@section server Dart2 Server

The <a href="http://129.78.210.237:8081/orca2/Dashboard">Dart2 server for Orca2</a> is up and running. Users can sign themselves up by clicking on the ''login or create account'' link on top of the page. One useful feature is to send out emails to responsible developers when a build contained errors. After you login there are two two fields to fill in: Project and Repository id. Type in ''orca2'' for the Project and your sourceforge username as Repository id. After pressing the button Add repository id the mapping will show up in the table on the left. From now on, if you check something in that doesn't compile you'll get blamed by email, so don't screw up!

@section client Dart2 Client

@par Experimental Build
That's the simplest test you can run and you do things manually:
-# Checkout the Orca2 source tree from CVS and rename the directory, e.g. @c orca2-exp. Make sure @cvs can update the module without you typing in the password (see SourceForge help page).
-# Create an out-of-source build directory (e.g. ~/cvs/orca2-exp/build)
-# Run cmake and ctest
@verbatim
$ cd ~/cvs/orca2-exp/build
$ cmake ..
$ ctest -D Experimental
@endverbatim
If this worked you should see the results on the webpage soon after (it may take a few minutes since the server polls for submissions).

@par Nightly Build
If the previous has worked out you are ready to setup scripts for nightly builds:
-# Checkout the Orca2 source tree from CVS and rename the directory, e.g. @c orca2-night.
-# Create an out-of-source build directory (e.g. ~/cvs/orca2-night/build)
-# Create a ctest config file (e.g. ~/ctest-scripts/orca2/orca2_night.cfg):
@verbatim
SET (CTEST_SOURCE_DIRECTORY "/home/dart/cvs/orca2-night")
SET (CTEST_BINARY_DIRECTORY "/home/dart/cvs/orca2_night/build")
SET (CTEST_CVS_COMMAND "cvs")
SET (CTEST_COMMAND "ctest -D Nightly" )
SET (CTEST_CMAKE_COMMAND "cmake" )
SET (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)
SET (CTEST_INITIAL_CACHE "
MAKECOMMAND:STRING=make
BUILDNAME:STRING=Debian-gcc40
SITE:STRING=devdebian.acfr.usyd.edu.au
CMAKE_BUILD_TYPE:STRING=Debug
")
SET (CTEST_ENVIRONMENT
 CC=/usr/bin/gcc-4.0
 CXX=/usr/bin/g++-4.0)
@endverbatim
-# Write a shell script which executes the ctest script (e.g. ~/ctest-scripts/orca2/dart.night): 
@verbatim
SHELL=/bin/bash
source ~/.bashrc
/usr/bin/ctest -S /home/dart/ctest-scripts/orca2_night.cfg -V >> /home/dart/cron_logs/night_build.log 2>&1
@endverbatim
-# Add a cron job which executes the shell script at night. First create a file my.crontab: 
@verbatim
SHELL=/bin/bash
0 2    * * *  /home/dart/ctest-scripts/dart.night
@endverbatim
Then add it to your crontab by doing: crontab my.crontab Check with crontab -l

@par Continuous Build
Continuous testing is useful during active development. Whenever something changed in CVS the tests are run and submitted to the dashboard.
-# Checkout the Orca2 source tree from CVS and rename the directory, e.g. @c orca2-cont.
-# Create an out-of-source build directory (e.g. ~/cvs/orca2-cont/build)
-# Create a configuration file (e.g. ~/ctest-scripts/orca2/orca2_cont.cfg)
@verbatim
SET (CTEST_SOURCE_DIRECTORY "/home/dart/cvs/orca2-cont")
SET (CTEST_BINARY_DIRECTORY "/home/dart/cvs/orca2-cont/build")
SET (CTEST_CVS_COMMAND "cvs")
SET (CTEST_COMMAND "ctest -D Continuous" )
SET (CTEST_CMAKE_COMMAND "cmake" )
SET (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)
SET (CTEST_INITIAL_CACHE "
MAKECOMMAND:STRING=make
BUILDNAME:STRING=Debian-gcc40
SITE:STRING=devdebian.acfr.usyd.edu.au
CMAKE_BUILD_TYPE:STRING=Debug
")
SET (CTEST_ENVIRONMENT
 CC=/usr/bin/gcc-4.0
 CXX=/usr/bin/g++-4.0)
@endverbatim
-# Write a shell script (e.g. ~/ctest-scripts/orca2/dart.cont).
@verbatim
#!/bin/bash
while true; do
 echo "***************************"
 echo " Starting ctest at `date`"
 echo "***************************"
 ctest -V -S orca2-cont.cfg
 echo "***************************"
 echo " Finished ctest at `date`"
 echo "***************************"
 echo " "
 sleep 300
done
@endverbatim
-# Execute it once using nohup:
@verbatim
$ cd ~/ctest-scripts/orca2
$ nohup ./dart.cont >/dev/null 2>&1 &
@endverbatim
-# Now you can log out and the scrip will run forever.

@section note Final note
All scripts listed above can also be found in the [ORCA2-SRC]/scripts/dart2/ directory, so you can simply copy and edit them.

*/
