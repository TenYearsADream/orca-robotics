/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_devadd_iface Adding Interfaces to Orca2

@note Reviewed for release 2.1.2

@see @ref orca_doc_devadd_code.

@par How to write an interface file

Orca interfaces are written in Slice interface definition language. There are no restrictions on what an Orca interface should or should not contain. 

A Slice interface is defined as a set operations. Opararations can contain input and output parameters. These parameters can be represented in different ways listed here in order of increasing complexity:
- @e struct
    - In C++, this becomes a simple structure. 
    - Use these unless there is a good reason not to.
- @e class with member variables only
    - In C++, this beomes a smart pointer to class. 
    - Use these if you need inheritance in object definition.
- @e interface
    - In C++, this becomes a proxy to a remote interface.
    - Use these if you need to return an address of another interface.
- @e class with member variables and functions
    - Same as class without functioins but requires implementing factories. 
    - Use these if you need to perform local operations using remote objects.

For more information read the chapter on Slice in the Ice Manual <a href="http://www.zeroc.com/download.html#doc" target="_blank">[download]</a>

@par How to add an interface to the build system

-# Write a Slice file (*.ice) which defines an interface.
    - Slice files are in @c [ORCA_SRC]/src/interfaces/slice/orca
    - To create a new interface start by copying a similar file.
-# Add the filename of the new file to the list of Slice sources
    - Edit file @c [ORCA_SRC]/src/interfaces/slice/orca/slice_sources.cmake

@par Adding support for you interface

Optionally, consider adding support for you interface in libraries and utilities. Library libOrcaObjects has many functions specialized for data objects, e.g. toString() and setSane(). The following tools have a plug-in structure:
    - @ref orca_util_orcaview2d
    - @ref orca_util_orcaview3d
    - @ref orca_component_logger
    - @ref orca_component_logplayer
    - @ref orca_util_probe
    - @ref orca_component_orcamon

*/
