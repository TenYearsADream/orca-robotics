/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_devproj Starting Your Own Orca Project

@note Reviewed for release 2.7.0.

A common situation is that you want to experiment with some components without the hassle of
committing them into the Orca SourceForge repository or want to work on a closed-source
component. In this case you should download and install the main Orca distribution and
then setup a parallel workspace for your own project.

To help you start quickly we provide a template  project which uses CMake, mirrors
the setup of the Orca repository and is already set up to find Ice and Orca
installation, etc. You can of course set up a project in any way you like, however you
might find it useful. Export CVS module 'empty-project'. Use the export SVN command instead checkout, otherwise you'll have to manually remove all CVS directories. With @c orcacvs pointing at the SourceForge cvs server, the command looks like this:
@verbatim
$ orcacvs export -r HEAD empty-project
@endverbatim

To customize the empty project a project called 'tractor' follow these steps:
- Rename the directory 'empty-project' to 'tractor'
- Edit the top level CMakeLists.txt file so it looks like this:
@verbatim
# project name
PROJECT( tractor )
# project version string.
SET( PROJECT_VERSION                0.0.1       CACHE STRING "Version of Tractor distribution" )
# the name of the environment variable which sets installation directory.
SET( PROJECT_INSTALL_ENV_VAR        TRACTOR_INSTALL )
# the name for project's interface library.
SET( PROJECT_INTERFACE_LIB          TractorInterfaces )
@endverbatim
- Rename interface subdirectories named after the project main namespace:
@verbatim
$ mv src/interfaces/slice/empty src/interfaces/slice/tractor
$ mv src/interfaces/cpp/empty src/interfaces/cpp/tractor
@endverbatim
- Edit the corresponding CMakeLists.txt files (e.g. @c src/interfaces/slice/CMakeLists.txt), change the argument of SUBDIRS() command from 'empty' to 'tractor'.
- Rename the module name in the sample interface .ice file @c src/interfaces/slice/tractor/someinterface.ice so that the include line looks like this:
@verbatim
#ifndef TRACTOR_SOME_INTERFACE_ICE
#define TRACTOR_SOME_INTERFACE_ICE

#include <orca/orca.ice>

module tractor
{
@endverbatim
- Edit the source file of the sample component @c src/components/somecomponent/main.cpp so that the include line looks like this:
@verbatim
#include <tractor/someinterface.h>
...
    tractor::SomeDataPtr someData = new tractor::SomeData;
@endverbatim

- Edit the source file of the sample utility @c src/utils/someutil/main.cpp so that the include line looks like this:
@verbatim
#include <tractor/someinterface.h>
...
    tractor::SomeDataPtr someData = new tractor::SomeData;
@endverbatim

- If you're going to use revision control system (e.g. SVN, CVS), it's a good idea to commit your project to your own repository at this point. All the current files are "raw" files which need to be added to CVS. If you commit later and used an in-source build, raw and generated files will be mixed.

- Run cmake and compile.

This enough to get you started. Now you can start writing code: add your own components, libraries, and interfaces.

@par Tips for maintaining your project

- Tag versions. If this is an internal project, then you probably don't realease distributions. It's still useful to have a history of working code. It's easy to add a tag when Orca version changes and you made sure that your project compiles with the new version. Here's an example of tagging for version Orca v.2.2.0.
@verbatim
$ cvs tag -f orca-220
@endverbatim


*/
