/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_devproj Starting Your Own Orca Project

@note Reviewed for release 2.0.0.

A common situation is that you want to experiment with some components without the hassle of
committing them into the Orca SourceForge repository or want to work on a closed-source
component. In this case you should download and install the main Orca distribution and
then setup a parallel workspace for your own project.

To help you start quickly we provide a template  project which uses CMake, mirrors
the setup of the orca2 repository and is already set up to find Ice, orca2
installation, etc. You can of course set up a project in any way you like, however you
might find it useful. Export CVS module 'empty-project'. Use the export CVS command instead checkout, otherwise you'll have to manually remove all CVS directories. With @c orcacvs pointing at the SourceForge cvs server, the command looks like this:
@verbatim
$ orcacvs export -r HEAD empty-project
@endverbatim

To cusomize the empty project a project called 'tractor' follow these steps:
- Rename the directory 'empty-project' to 'tractor'
- Edit the top level CMakeLists.txt file so it looks like this:
@verbatim
# project name
PROJECT( tractor )
# project version string.
SET( PROJECT_VERSION                0.0.1       CACHE STRING "Version of Tractor distribution" )
# the name of the environment variable which sets installation directory.
SET( PROJECT_INSTALL_ENV_VAR        TRACTOR_INSTALL )
# the name for project's interface library.
SET( PROJECT_INTERFACE_LIB          TractorInterfaces )
@endverbatim
- Rename interface subdirectories named after the project main namespace:
@verbatim
$ mv src/interfaces/slice/empty src/interfaces/slice/tractor
$ mv src/interfaces/cpp/empty src/interfaces/cpp/tractor
@endverbatim
- Edit the corresponding CMakeLists.txt files, change the argument of SUBDIRS() command from 'empty' to 'tractor'.
- Rename the module name in the sample interface .ice file @c src/interfaces/slice/someinterface.ice so that the include line looks like this:
@verbatim
#ifndef TRACTOR_SOME_INTERFACE_ICE
#define TRACTOR_SOME_INTERFACE_ICE

#include <orca/orca.ice>

module tractor
{
@endverbatim
- Edit the source file of the sample component @c src/components/somecomponent/main.cpp so that the include line looks like this:
@verbatim
#include <tractor/someinterface.h>
...
    tractor::SomeDataPtr someData = new tractor::SomeData;
@endverbatim
- Run cmake and compile.

This enough to get you started. Now you can commit your new project to your own CVS server and start writing code: add your own components, libraries, and interfaces.

*/
