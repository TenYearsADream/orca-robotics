/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2009 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_devtricks Miscelaneous notes on writing Orca code with Ice.

@note Reviewed for release 2.0.0.

@par Generating skeleton implementations

Ice utility slice2cpp can generate implementation skeletons from *.ice files. We don't do it because they would then be compiled and included (unnecessarily) with libOrcaInterfaces library. So if you need to implement an interface, e.g. Home, you can generate a skeletion like this:

@verbatim
$ cd <ORCA_SRC>/src/interfaces/slice/orca
$ slice2cpp -I<ORCA_SRC>/src/interfaces/slice/ -I<ICE_SLICE_HOME> --impl home.ice
$ ls home*
home.cpp  home.h  home.ice  homeI.cpp  homeI.h
@endverbatim

Where ICE_SLICE_HOME location depends on how Ice was installed. Ice's standard installation puts it into @c <ICE_INSALL>/slice. Debian package puts it into @c /usr/share/slice/.

In the directory you can see 4 generated files: %homeI.h and homeI.cpp are the skeletons. Move them to your component directory and delete home.h and home.cpp. There are 2 modifications to the files you'll have to make:

- The #include for the interface definition file in @c %homeI.h is missing the namespace, so it looks like this:
@verbatim
#include <orca/home.h>
@endverbatim

- Unless your current directory is in the include path, change brackets to quotes in @c homeI.cpp, so it looks like this:
@verbatim
#include "homeI.h"
@endverbatim


@par Generating Local Documentation

You'll need @c doxyorca which is a patched version of Doxygen which can parse @c .ice files. If you don't have it, just use standard @c doxygen.

@verbatim
$ cd <ORCA_SRC>/doc
$ doxyorca orca.doxyfile
$ konqueror html/index.html &
@endverbatim


*/
