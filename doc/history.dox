/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_history Orca History

@note Reviewed for release 2.0.0.

Orca began as part of the EU-funded OROCOS Project: a project to develop an Open-Source Robotic Control System.  The project was a collaboration between four universities: <a href="http://www.cas.kth.se" target="_blank">KTH</a> (Sweden), Leuven (Belgium), LAAS (France) and Ulm (Germany).  The four institution worked on separate parts of a project that was intended to eventually merge, but never did.  The Orocos name now refers to <a href="http://www.orocos.org" target="_blank">the Belgian part</a>.

The task of <a href="http://www.cas.kth.se" target="_blank">KTH</a> was to build a set of communication patterns to enable the interaction of distributed components.  This work, spearheaded by Anders Oreb&auml;ck, was called Orocos\@KTH.  By June 2004 Orocos\@KTH had also been adopted by members of the <a href="http://www.acfr.usyd.edu.au" target="_blank">Australian Centre for Field Robotics</a>.  By this time it had diverged far enough from the work at Leuven that a new name was required to disambiguate the two, and Orca1 was born. At that time the project moved to SourceForge. 

Work on porting Orca to Ice started in March of 2005. The new version called Orca2 was forked in late 2005, the main difference being the move to Ice middleware as the sole communications package. Switching to Ice has caused large changes in the component model. This means that Orca1 and Orca2 components are mutually incompatible.

At present, Orca is most actively used at several Universities in Sydney, Australia. For a sample of past and current projects see @ref orca_doc_projects.

@image html orca_sloc.jpg

Source code size gives some idea about the project's activity. The stats above are generated using David A. Wheeler's SLOCCount. This figure also helps illustrate our main objective: we are interested in a large "superstructure" (blue) -- useful components, and don't want to "dig" a deep "foundation" (orange) -- the infrastructure necessary to allow components to talk to each other. This was the main motivation for switching to Ice which is visible since v.2.0.0-rc1 at the end of 2005. Note that we count here only the C++ and Java distributions of Ice. 

For comparison, we show a similar analysis of Player, up to distribution v.2.0.2. For the purposes of this figure, Player 2.0.2 "infrastructure" includes the contents of {libplayercore, client_libs, libplayertcp} and Player 2.0.2 "components" includes the code in {server, utils}. The autogenerated bindings are excluded.

*/
