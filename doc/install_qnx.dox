/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_installqnx Installing Orca on QNX Neutrino

@note Reviewed for release 2.1.2.

These are detailed instructions for installing Orca on QNX Neutrino Real Time OS. They are known to work with OS version 6.3 SP3. See @ref orca_doc_getting for general guidelines.

@section orca_doc_installqnx_os OS and Utilities

QNX standard installation includes a minimum set of UNIX utilities. If you are going to be doing some develepment in QNX it helps if you add some basics. Get the the 3rd party package CD, run the Installer (click on Launch in low-left corner) and install the following:
- GNU bash
- GNU libtool
- GNU man
- GNU pkgconfig
- GNU Text Utils
- OpenSSH
- Perl
- Python

Set up environment variables by adding this to $HOME/.profile

@verbatim
export CXX=QCC
export CC=qcc
export CXXFLAGS="-V3.3.5,gcc_ntox86_cpp"
export CFLAGS="-V3.3.5,gcc_ntox86"
export LDFLAGS="-lang-c++ -lm"
export CVS_RSH=ssh
@endverbatim

Standard shell is ksh. If you prefer to use bash, you can, it is installed in /opt/bin. But the environment does not seem to be setup automatically. These environment variables must be defined for you to be able to compile stuff.

@verbatim
export PATH=$PATH:/opt/X11R6/bin:/usr/X11R6/bin:/usr/local/bin:/opt/bin:/usr/qnx630/host/qnx6/x86/usr/bin:\
/usr/qnx630/host/qnx6/x86/usr/sbin:/usr/qnx630/host/qnx6/x86/sbin:/usr/qnx630/host/qnx6/x86/bin:\
/usr/qnx630/host/qnx6/x86/usr/photon/appbuilde
export QNX_HOST=/usr/qnx630/host/qnx6/x86
export QNX_TARGET=/usr/qnx630/target/qnx6
@endverbatim

@section orca_doc_installqnx_cmake CMake

Minimum version required 2.4-patch 2 (latest tested: 2.4-patch 5).

@verbatim
$ tar -xzf cmake-2.4.5.tar.gz
$ ./bootstrap
$ make
# make install
@endverbatim

@section orca_doc_installqnx_ice Ice

Minimum version required 3.1.0 (latest tested: 3.1.1).

No packages exist, so we have to build from source. Following the instructions below will install Ice to the default location @c /opt/Ice-[VERSION]. We recommend doing this but, if you have a good reason, you can change it by editing the file config/Make.rules.

First, install Ice dependencies. You can download the ThirdPartySources archive from ZeroC but they tend to be a bit out of date. Below we point out where newer versions are required.

- @b libexpat. The version distributed by ZeroC is 1.95.8 and it does not build. We got v.2.0.0 from http://expat.sourceforge.net/.

@verbatim
$ tar -xzf expat-2.0.0.tar.gz
$ cd expat-2.0.0
$ ./configure --prefix=/opt/expat-2.0.0
$ make
# make install
# ln -s /opt/expat-2.0.0 /opt/expat
@endverbatim

- @b libbzip2. The version which comes from ZeroC is 1.0.3, it worked fine.

@verbatim
$ tar -xzf bzip2-1.0.3.tar.gz
$ cd bzip2-1.0.3
$ make
# make install PREFIX=/opt/bzip2-1.0.3
# ln -s /opt/bzip2-1.0.3 /opt/bzip2
@endverbatim

- @b Berkley @b DB. This one is fun. This DB officially supports QNX but it didn't work out of the box. Ice requires v.4.3 and distributes v.4.3.29. I couldn't link Ice dynamically to it no matter what I tried, with this version and later ones 4.4.20 and 4.5.20. It compiled but at run time puked after complaining about "Unknown symbols" (11 of them). At the end I managed to get Ice working when linked statically to libdb_cxx. But because the db symbols are used in libFreeze.so, the db library has to be special: static but with PIC option enabled.

@verbatim
$ tar -xzf db-4.5.20.NC.tar.gz
$ cd db-4.5.20.NC/build_unix
$ ../dist/configure --enable-cxx --prefix=/opt/db-4.5.20
$ make
$ QCC -A libdb_cxx-4.5S.a .libs/*.o
# make install
# cp libdb_cxx-4.5S.a /opt/db-4.5.20/lib/.
# ln -s /opt/db-4.5.20 /opt/db
@endverbatim

- @b libOpenSSL. Build v.0.9.8 from source (requires Perl5). The binary package of 0.9.7 on the 3rd party CD didn't work. At the end some tests in IceSSL failed. I didn't try hard to fix it because I don't need SSL.

@verbatim
$ tar -xzf openssl-0.9.8b.tar.gz
$ cd openssl-0.9.8b
$ ./config --prefix=/opt/openssl-0.9.8b
$ make
# make install
# ln -s /opt/openssl-0.9.8b /opt/openssl
@endverbatim

Now Ice itself. 

- Get source
    - get source from  http://www.zeroc.com/download.html
    - get the patch from http://zeroc.com/vbulletin/showthread.php?t=2884
    - apply the patch, but @b NOT in QNX. The @c patch that comes with QNX does not seem to work. So I built and applied the patch in Linux and then transferred the patched source to QNX.
@verbatim
$ tar -xzf Ice-3.1.1.tar.gz
$ cd Ice-3.1.1
$ patch -p1 < ../ice311qnx.patch.txt
@endverbatim

- Configure
    - Edit [ICE-SRC]/config/Make.rules file. If you followed these installation instructions, simply uncomment the lines corresponding to BZIP2_HOME, DB_HOME, and EXPAT_HOME. Remove the question marks.
@verbatim
BZIP2_HOME      = /opt/bzip2
DB_HOME	        = /opt/db
EXPAT_HOME      = /opt/expat
OPENSSL_HOME    = /opt/openssl
@endverbatim

- Compile and install.  Tests are optional, but in this case they are highly recommended.
	- start compilation
@verbatim
$ make
@endverbatim
        - towards the end you'll get an error. You'll have to manually modify the auto-generated files. Add "#include <ctype.h>" to these two files:    
		- [ICE-SRC]/demo/Freeze/phonebook/NameIndex.cpp
		- [ICE-SRC]/demo/Freeze/bench/BenchTypes.cpp
	- continue compilation
@verbatim
$ make
$ make test
# make install
@endverbatim

Make sure that the Ice binaries and executables are in the path. You may want to add this snippet to your @c ~/.profile file (don't forget to replace [VERSION]).
@verbatim
export ICE_HOME=/opt/Ice-[VERSION]
export PATH=$ICE_HOME/bin:$PATH
export LD_LIBRARY_PATH=$ICE_HOME/lib:$LD_LIBRARY_PATH
@endverbatim

@section orca_doc_installqnx_orca Orca

Build and install Orca2 distribution.
    - Download the latest release of <a href="http://sourceforge.net/project/showfiles.php?group_id=111647">orca2</a> and un-tar the archive.
    - The default installation directory is  @c /opt/orca-[VERSION], where [VERSION] is the Orca version. You can customized this by setting ORCA2_INSTALL environment variable (e.g. 'export ORCA2_INSTALL=~/orca2').
    - Configure using @c cmake . (note the dot after cmake)
    - Compile, and install. If you've changed your mind about the installation directory, you can change it using @c ccmake tool ('$ ccmake .').
@verbatim
$ tar -zxf orca2-x.x.x.tar.gz
$ cd orca2
$ cmake .
$ make
# make install
@endverbatim

Make sure that the binaries and executables are in the path. You may want to add a snippet to your @c ~/.profile file similar to the one below. Replace [VERSION] with the version of Orca you've just installed. Change the directory if you've modified the default install directory. Notice that the environment variable for the Orca installation to use (ORCA2_HOME) is different from the one which specifies where to install Orca (ORCA2_INSTALL). This allows multiple Orca installations on the same machine.
@verbatim
export ORCA2_HOME=/opt/orca-[VERSION]
export PATH=$ORCA2_HOME/bin:$PATH
export LD_LIBRARY_PATH=$ORCA2_HOME/lib:$LD_LIBRARY_PATH
@endverbatim

These environment variables are optional but you may as well put them into your @c ~/.bashrc file now so that you have easy access to them later.
@verbatim
# uncomment to change the default location of Orca installation
# export ORCA2_INSTALL=/opt/orca-[VERSION]
# uncomment to change the default location of the Orca global config file
# export ORCA2_CONFIG=$HOME/.orcarc
@endverbatim

You are finished.

*/
