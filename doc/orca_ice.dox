/*
 *  Orca Project: Components for robotics.
 *
 *  Copyright (C) 2004-2006
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_orcaice Orca and Ice: assumptions, constraints, etc.

Ice is a general purpose framework for distributed computation. Orca is a component-based framework for robotics. Ice hides a lot of complexity associated with distribution but it is still a large package with many options and unlimited variety of implementations. libOrcaIceUtil library suggests certain patterns for component interaction and internal organization. Here we list the conventions made in the process.

@par Ice Communicator, Object Adapter, and Objects.

An Ice application can have multiple Communicators (Ice run-time), each with zero-to-N Object
Adapters, each with zero-to-M objects. In contrast, an Orca component implemented as an
orcaice::Application has one Communicator with one Object Adapter, which may have several
Objects.

@par Slice Classes vs. Strutures

We chose to use Slice classes (and not structures) to implement Orca data objects becase classes allow inheritence. A (slight) drawback of classes is larger memory footprint and higher transmission latencies. We've done some tests which showed that the penalty is acceptable. [INSERT FIGURE].

Another point to keep in mind is that, generally, classes need to register with the Object Factory to be instantiated at run time. This rule does not apply if the class does not have only data members but no operations as is the case in Orca. See Ice manual Sec. 6.14.5.

@par Naming Scheme

Interface (Object) names are constructed from: platform + component + interface names.


*/
