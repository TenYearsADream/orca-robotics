/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_overview Orca Overview

@par Goals and Requirements

We think that software reuse is key for continuing progress in robotic research and insdustry. Orca is our attempt at doing it. The project's goals are:
- to \b enable software reuse by defining a set commonly-used @b interfaces;
- to \b simplify software reuse by providing @b libraries with a high-level convenient API; and
- to \b encourage software reuse by maintaining a @b repository of components.

To be successful, we think a framework like Orca must be:
- general, flexible and extensible
- sufficiently robust, high-performance and full-featured for use in commercial applications
- sufficiently simple for experimentation in university research environments.

@par Licence and Copyright

- Orca software is released under LGPL and GPL licenses
- A special clause in the Ice licence allows us to distribute LGPL libraries linking to Ice.
- Copyright belongs to developers and major contributors.

@ref orca_doc_license "Read more..."

@par Approach

A combination of several design choices sets this project apart from other initiatives with similar objectives. Namely, Orca:
- adopts a Component-Based Software Engineering approach without applying any additional architectural constraints
- uses a commercial open-source library for communication and interface definition
- provides tools to simplify component development but makes them strictly optional to maintain full access to the underlying communication engine and services
- uses cross-platform development tools

@ref orca_doc_approach "Read more..."

@par OS support

- full Linux support
- interfaces, core utilities and some components compile in Windows XP.
- experimental builds in MacOS-X

The basic tools we use are cross-platform, so in principle Orca can be deployed as widely as CMake/Ice combination.

@par Programming language support

- all components which are currently in the repository are written in C++
- there's an example in Java.

Slice interfaces can be compiled to C++, Java, Python, PHP, C\#, and Visual Basic. All of these can be used to implement or use Orca interfaces.

@par Repository

We recognise that the usefulness of both the framework and any particular component increases with the variety and quality of the available components with which one can interact.  We therefore maintain @ref orca_doc_swmap "this online repository". Users are encouraged to contribute their own components and to point out omissions in components' documentation.

- currently contains components useful in mobile robotics, e.g. sensor drivers, obstacle avoidance, etc.
- feel free to contribute components or libraries for any subfield of robotics.

@par Terminology

In addition to standard definitions of @e components and @e interfaces, Orca naming conventions also refer to robotic @e platforms. @ref orca_doc_terminology "Read more..."

@par History

Orca grew out of Orocos\@KTH project. It has been on SourceForge.net since June 2004. @ref orca_doc_history "Read more..."

*/
