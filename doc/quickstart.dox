/*
 *  Orca Project: Components for robotics.
 *
 *  Copyright (C) 2004-2006
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@page orca_doc_quickstart Quick-Start Guide

@note Reviewed for release 2.0.0.

This page describes how to get a quick demonstration up and running with your new Orca install. Before you begin, make sure that you've installed Orca (see @ref orca_doc_getting ).

@section startup Starting Up the Infrastructure

We'll be using sample configuration files which are distributed with Orca. As the general rule, you shouldn't work or run programs from the distribution. So we'll create a separate directory and copy config files into it.
@verbatim
$ cd ~
$ mkdir sys
@endverbatim

@par IceGrid Registry

The IceGrid Registry provides a Naming service: a mapping from logical interface names to physical addresses. It's currently the only way for components to find one another. We create a separate directory for it to run in, copy a sample config file, create the database directory and start it up.
@verbatim
$ cd ~/sys; mkdir icereg; cd icereg
$ cp [ORCA2-SRC]/scripts/ice/icegridregistry.cfg .
$ mkdir db
$ icegridregistry --Ice.Config=icegridregistry.cfg
@endverbatim

This starts @c icegridregistry on your local machine.  If you're going to be using Orca a lot,
it's probably a good idea to set this up so it's always running on a single machine on the network.

@par IceStorm Service

IceStorm is an event service, used to decouple publishers from subscribers. Typically, there is one IceStorm service per host. We create a separate directory for it to run in, copy a sample config file, create the database directory and start it up.
@verbatim
$ cd ~/sys; mkdir icestorm; cd icestorm
$ cp [ORCA2-SRC]/scripts/ice/icebox_icestorm.cfg .
$ mkdir stormdb
$ icebox --Ice.Config=icebox_icestorm.cfg
@endverbatim

[Note for Debian users: See the @ref orca_doc_faq entry on 127.0.1.1 in the /etc/hosts file.]

@section point Pointing Components at this Infrastructure

When an Orca component starts up, it needs to know how to find the services above. This information can go into config files for individual components.

Components in this tutorial use @c libOrcaIce, which looks up this information in a single file @c ~/.orcarc
@verbatim
# Standard Ice Configuration for Orca
Ice.Default.Locator=IceGrid/Locator:default -p 12000
IceStorm.TopicManager.Proxy=IceStorm/TopicManager:default -p 10000
@endverbatim
(modify appropriately if this differs from your system setup)


@section talk Getting Two Components Talking

Now will connect a fake laser component to a laser monitoring component. First, copy the provided configuration files for the SickLaser and LaserMon components.
@verbatim
$ cd ~/sys; mkdir quickstart; cd quickstart
$ cp [ORCA2-INSTALL]/cfg/sicklaser.cfg .
$ cp [ORCA2-INSTALL]/cfg/lasermon.cfg .
@endverbatim

Then, configure the laser for fake (simulated) operation (or skip this step if you're connected to a real SICK laser).  Edit @c sicklaser.cfg, and replace 'native' with 'fake' so it looks like this:

@verbatim
SickLaser.Config.Driver=fake
@endverbatim

Start the @c sicklaser component:

@verbatim
$ sicklaser sicklaser.cfg
@endverbatim

Start a new shell, and fire up the @c lasermon component (a laser monitor). No modifications are needed for its configuration file. Note that the name of the configuration file is not specified and it is assumed to be @c lasermon.cfg.

@verbatim
$ lasermon
@endverbatim

You should see the scans scroll by on the screen. Congratulations, your first two components are talking! To stop components, hit Ctrl-C.

If something does not work, check out the listing of @ref orca_doc_faq.

*/
