/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_tutebrickwrite Writing a super-simple component

@note Reviewed for release 2.9.0.

This page describes the basic structure of a typical Orca component. We use @ref orca_component_brick component as an example. When you are done, go to the next tutorial: @ref orca_doc_tutebrickrun

@section orca_doc_tutebrickwrite_files Source files

Go to the top directory of the Orca distribution and type the following:

@verbatim
$ ls src/examples/brick
brick.def  CMakeLists.txt  component.h  mainthread.cpp  service.cpp
brick.dox  component.cpp   main.cpp     mainthread.h    service.h
@endverbatim

What are all these files? Here we'll just list their purpose, click on the links for the line-by-line explanation of the source.

- @ref orca_doc_tutebrickwrite_cmakelists -- A special text file used by the CMake build system. Based on the CMakeLists.txt in the current directory and the similar files in all directories above, CMake will generate Makefiles (or equivalents for non make-based systems, e.g. MS Visual Studio)

- @ref orca_doc_tutebrickwrite_main -- The entry point into the stand-alone component executable. This executable will contain our component. Running the executable in its own process is the normal way of @e deploying the component.

- @ref orca_doc_tutebrickwrite_service_h and @ref orca_doc_tutebrickwrite_service_cpp -- The entry point into the IceBox service which will contain the same component. IceBox is an @e application @e server supplied with Ice. Our service will be compiled into a shared library which the IceBox can load at runtime. Running the component as a service is an alternative way of deploying our component. Which deployment method to choose depends on the application. The main difference is that all services inside an IceBox run within one process.

- @ref orca_doc_tutebrickwrite_component_h and @ref orca_doc_tutebrickwrite_component_cpp -- The class defining our component. The same component can be placed into an executable or into a service. A component typically launches at least one thread in which it performs some useful task.

- @ref orca_doc_tutebrickwrite_mainthread_h and @ref orca_doc_tutebrickwrite_mainthread_cpp -- The one and only thread of our component.

- @ref orca_doc_tutebrickwrite_brick_def -- The component definition file. It contains information about the component's provided and required interfaces, configuration parameters, etc. During compilation a special utility @ref orca_util_def2cfg is automatically called to convert @c brick.def file into a sample @c brick.cfg file which is later installed into @c [ORCA_INSTALL]/cfg directory. The format of @c .def file is described in the documentation for the @ref orca_util_def2cfg utility.

- @c brick.dox -- Component documentation in Doxygen format. @ref orca_component_brick "This documentation" is generated from brick.dox. For the details of the  format, see Doxygen documentation.


@section orca_doc_tutebrickwrite_cmakelists CMakeLists.txt

@code
SET ( COMP_NAME brick )
SET ( SERVICE_NAME OrcaBrick )

REQUIRE_OPTION( EXE ${COMP_NAME} ON )

IF ( BUILD)

    INCLUDE( ${ORCA_CMAKE_DIR}/UseComponentRules.cmake )

    FIND_COMPONENT_SOURCES( COMP_SRCS )

    # libs on which our code depends would go here
#     SET( COMP_DEPS ??? )

    # build stand-alone component  
    GLOBAL_ADD_EXECUTABLE( ${COMP_NAME} ${COMP_SRCS} main )
#     TARGET_LINK_LIBRARIES( ${COMP_NAME} ${COMP_DEPS} )

    # build IceBox service
    IF ( BUILD_SERVICES AND NOT OS_WIN )
        GLOBAL_ADD_LIBRARY( ${SERVICE_NAME} SHARED ${COMP_SRCS} service )
#         TARGET_LINK_LIBRARIES( ${SERVICE_NAME} ${COMP_DEPS} ) 
    ENDIF ( BUILD_SERVICES AND NOT OS_WIN )

    GENERATE_CONFIG_FILE( ${COMP_NAME}.def )

ENDIF ( BUILD )
@endcode
 
@par Line by Line Walkthrough

@verbatim
SET ( COMP_NAME brick )
SET ( SERVICE_NAME OrcaBrick )
@endverbatim
We define CMake 2 variables to name the component executable and the component IceBox service library. We'll use them in this file.

@verbatim
REQUIRE_OPTION( EXE ${COMP_NAME} ON )
@endverbatim
This line calls a CMake macro which defines a user-configurable compilation option. It will be called @c BUILD_BRICK (BUILD + the name of our component in upper case). This option can be used as a variable to implement conditional compilation. The default value of this variable is ON, equivalent to TRUE. CMake comes with a configuration tool called @c ccmake. In Linux, when you type "ccmake ." in the top directory of the Orca distribution, you will see a list of all compilation options. Scroll down to BUILD_BRICK and press ENTER, the value of the option will change to OFF. Now configure (press @c c) and generate (press @c g). The build options have now been adjusted such that the Brick example will not be compiled. Repeat the process to turn the compilation back on or delete @c CMakeCache.txt to go back to defaults.

@verbatim
IF ( BUILD)
@endverbatim
Do not compile this example if any of requirements are not satisfied. In this case we only have one requirement: the wish of the user. Typically, there will be several, e.g. the OS, required libraries, etc.

@verbatim
    INCLUDE( ${ORCA_CMAKE_DIR}/UseComponentRules.cmake )
@endverbatim
Most components are compiled with the same compiler options, include the same type of header files and are linked to the same libraries. These common settings are defined in a CMake file called @c UseComponentRules.cmake and located in @c [ORCA-SRC]/cmake directory. The CMake @C INCLUDE command imports all the commands from that file as if we typed them in here by hand.

Because the @c UseComponentRules.cmake script is installed with the rest of the Orca files, satellite projects which use Orca can use this script file as well. The CMake variable @c ORCA_CMAKE_DIR works out the correct location of Orca CMake scripts.

@verbatim
    FIND_COMPONENT_SOURCES( COMP_SRCS )
@endverbatim
This CMake macro simply gets a list of all *.cpp files in the current directory and removes 2 files from the list: @c main.cpp and @c service.cpp. We'll see the reason for this in a second. The remaining list is assigned to the variable called @c COMP_SRCS.

@verbatim
    # libs on which our code depends would go here
#     SET( COMP_DEPS ??? )
@endverbatim
Pound sign marks comments. Here we comment out a line which would normally be used to specify library dependencies. This example does not need to be linked to any library besides the typical ones specified by UseComponentRules.cmake script.

@verbatim
    GLOBAL_ADD_EXECUTABLE( brick ${COMP_SRCS} main )
@endverbatim
The macro GLOBAL_ADD_EXECUTABLE will tell the build system to create an executable called @c brick (in Windows @c brick.exe) by compiling all source files listed in @c COMP_SRCS plus @c main.cpp. The file @c service.cpp is not needed to produce a stand-alone executable, for this reason it was not included in @c COMP_SRCS. The macro does other convenient things: it will schedule @c brick to be installed into @c [ORCA-INSTALL]/bin, add it to the list of all executables to be displayed at the end of the configuration step, etc.

@verbatim
#     TARGET_LINK_LIBRARIES( ${COMP_NAME} ${COMP_DEPS} )
@endverbatim
This would be uncommented if we had dependencies.

@verbatim
    IF ( BUILD_SERVICES AND NOT OS_WIN )
        GLOBAL_ADD_LIBRARY( ${SERVICE_NAME} SHARED ${COMP_SRCS} service )
#         TARGET_LINK_LIBRARIES( ${SERVICE_NAME} ${COMP_DEPS} ) 
    ENDIF ( BUILD_SERVICES AND NOT OS_WIN )
@endverbatim
If the global option called @c BUILD_SERVICES is ON, create a shared library called @c libOrcaBrick.so by compiling all source files listed in @c COMP_SRCS plus @c service.cpp. The @c BUILD_SERVICES option is defined globally but can be user-configured with @c ccmake tool. The default setting is OFF. The macro will also schedule this service library to be installed into @c [ORCA-INSTALL]/lib. We could also link this library to dependencies. 

The global variable @c OS_WIN evaluates to TRUE when the OS belongs the Windows family. In Windows we don't compile this library. It can be done, but shared libraries are more complicated and we haven't the need to figure it all out.

@verbatim
    GENERATE_CONFIG_FILE( ${COMP_NAME}.def )
@endverbatim
We call a macro to automatically generate a configuration file (.cfg) from the component definition file (.def). For more information on config files, see @ref orca_doc_configfiles.

@verbatim
ENDIF ( BUILD )
@endverbatim
End of the IF block. Most of the CMake syntax you'll need you can work out from the existing files. For more details, consult the CMake documentation.

@section orca_doc_tutebrickwrite_main main.cpp

@code
#include <orcaice/application.h>
#include "component.h"

int main(int argc, char * argv[])
{
    brick::Component component;
    orcaice::Application app( component );
    return app.main(argc, argv);
}
@endcode

@par Line by Line Walkthrough

@verbatim
#include <orcaice/application.h>
@endverbatim
Our component uses @ref orca_library_orcaice library which simplifies component development. In particular, orcaice::Application wraps up the functionality of a stand-alone executable containing a single orcaice::Component. 

This line includes the header file for orcaice::Application class, the first of the two possible component containers.

@verbatim
#include "component.h"
@endverbatim
This line includes the definition of our Component (which derives from a generic orcaice::Component).

@verbatim
int main(int argc, char * argv[])
{
@endverbatim
The main() function is the entry point to our executable. The argc parameter is the number of command-line arguments and argv is the array of command-line arguments. This is a standard C++ feature.

@verbatim
    brick::Component component;
@endverbatim
We create an instance of our component. The constructor has no parameters.

@verbatim
    orcaice::Application app( component );
@endverbatim
We create an instance of orcaice::Application and pass to it the reference to our component. From now on the application will manage the component.

@verbatim
    return app.main(argc, argv);
}
@endverbatim
This is where main() passes control to orcaice::Application. Notice that we also give it the command line arguments, these will be parsed properly. The function orcaice::Application::main() will return when the application exits.



@section orca_doc_tutebrickwrite_service_h service.h

@code
#include <orcaice/service.h>

namespace brick {

class Service : public orcaice::Service
{
public:
    Service();
};

} // namespace
@endcode

@par Line by Line Walkthrough

There only a couple interesting lines of code here.

@verbatim
#include <orcaice/service.h>
@endverbatim
Class definition of orcaice::Service, the second of the two component containers. It derives from the IceBox::Service. but is also desinged to interact with orcaice::Component.

@verbatim
namespace brick {
@endverbatim
By convention, each component defines its own namespace. This enforces modularization and allows us not to worry about name clashes in the service libraries loaded into the same IceBox.

@verbatim
class Service : public orcaice::Service
@endverbatim
Our brick service derives from the generic orcaice::Service.

@section orca_doc_tutebrickwrite_service_cpp service.cpp

@code
#include "service.h"
#include "component.h"

extern "C"
{
    IceBox::Service* create( Ice::CommunicatorPtr communicator )
    {
        return new brick::Service;
    }
}

brick::Service::Service()
{
    component_ = new brick::Component();
}
@endcode

@par Line by Line Walkthrough

@verbatim
#include "component.h"
@endverbatim
Class definition of our component.

@verbatim
extern "C"
{
    IceBox::Service* create( Ice::CommunicatorPtr communicator )
@endverbatim
The IceBox application server will call this "factory" C function at runtime to create a service. Notice that it will pass to us a smart pointer to Ice::Communicator -- the main communication object of Ice runtime. We don't have to worry about it right now, orcaice::Service will store a copy of this pointer.

@verbatim
        return new brick::Service;
@endverbatim
When asked to create an instance of the service, our factory function will simply call the constructor.

@verbatim
brick::Service::Service()
{
    component_ = new brick::Component();
}
@endverbatim
The constructor of the service, calls the constructor of our component. 



@section orca_doc_tutebrickwrite_component_h component.h

@code
#include <orcaice/component.h>
#include <hydroutil/thread.h>

namespace brick
{

class Component: public orcaice::Component
{

public:
    Component();

    virtual void start();
    virtual void stop();
    
private:
    hydroutil::ThreadPtr mainThread_;
};

} // namespace
@endcode

@par Line by Line Walkthrough

@verbatim
#include <orcaice/component.h>
@endverbatim
Definition of the generic orcaice::Component.

@verbatim
#include <hydroutil/thread.h>
@endverbatim
Definition of the the hydroutil::Thread class, which is a simple extention of the very well-written cross-platform IceUtil::Thread class.

@verbatim
namespace brick
{
@endverbatim
All class definitions go into our private namespace.

@verbatim
class Component: public orcaice::Component
@endverbatim
Our component derives from the generic orcaice::Component which is designed to be enclosed in an orcaice::Application or orcaice::Service. See @ref orca_library_orcaice "libOrcaIce documentation" for an illustration of the relationship between the component and its two containers: the application and the service.

@verbatim
    Component();
@endverbatim
In general a specific component class can have a constructor with any number of parameters but this one doesn't have any.

@verbatim
    virtual void start();
    virtual void stop();
@endverbatim
Because we inherit from orcaice::Component, we have to implement its pure virtual functions start() and stop().

@verbatim
private:
    hydroutil::ThreadPtr mainThread_;
};
@endverbatim
The Component class holds a smart pointer to the thread class. Ice smart pointers are similar in concept to other smart pointers, e.g. from the boost library. By convention, Ice smart pointers have @e Ptr appended to the class name. A smart pointer is a class which can be used as a normal C++ pointer but it also performs gargage collection, e.i. it will call a destructor of the object to which it is pointing after the last smart pointer referencing that object goes out of scope. For more information on the use of Ice smart pointers see the Ice manual.


@section orca_doc_tutebrickwrite_component_cpp component.cpp

@code
#include <orcaice/orcaice.h>
#include "component.h"
#include "mainthread.h"

using namespace brick;

Component::Component() :
    orcaice::Component("Brick")
{
}

void
Component::start()
{
    mainThread_ = new MainThread( context() );
    mainThread_->start();
}

void
Component::stop()
{
    hydroutil::stopAndJoin( mainThread_ );
}
@endcode

@par Line by Line Walkthrough

@verbatim
#include <orcaice/orcaice.h>
@endverbatim
We'll use some of the functions provided by @ref orca_library_orcaice. You can include individual header files, but it's easier to use this library header which provides access to most of the library's functionality.

@verbatim
#include "mainthread.h"
@endverbatim
Definition of the MainThread class, we need it here because the thread will be created and launched from the component.

@verbatim
Component::Component() :
    orcaice::Component("Brick")
@endverbatim
Component constructor sets the @e tag name of the component. This is a string used to identify the properties of this component in the config file. The string hardwired here has to match the tags of the properties in the config files used with this compnent. See @ref orca_doc_tutebrickwrite_brick_def on how this is done with @c .def file.

@verbatim
Component::Component()
{
}
@endverbatim
There is nothing to do in the destructor. Notice that we hold a smart pointer to the main thread and, therefore, we do not call the thread's destructor explicitely.

@verbatim
void
Component::start()
{
@endverbatim
This is an implementation of a function defined in the generic orcaice::Component. It is one of the "hook" functions which will be called on initialization by one of the containers: the application or the service.

@verbatim
    mainThread_ = new MainThread( context() );
@endverbatim
Create an instance of the main thread. Notice that we pass a single parameter the thread constructor, so called @e "component context" encapsulated in the class orcaice::Context. Context provides access to many centralized facilities available within an Orca component. The most commonly used ones are:
- component configuration parameters: orcaice::Context::properties()
- Tracer for local and remote trace statements: orcaice::Context::tracer()
- Status for remote reporting of subsystem status: orcaice::Context::status(), and
- the Ice runtime communication object : orcaice::Context::communicator().

The context is passed down to our thread by the component. Had we had more than one thread, each would get its own copy of the context. All public functions and facilities of the context are thread-safe. The holder of the context is allowed to pass it on to others, e.g. to another thread launched from this one or a locally created object.

@verbatim
    mainThread_->start();
@endverbatim
Launch the thread. From now on, the thread runs on its own and the component can continue with its initialization.

Note that the design of @ref orca_library_orcaice requires that the implementation of Component::start() function returns flow of control to the container (application or service) after it's finished. Practically this means that the component is expected to perform some start-up operations, launch a thread or threads, and return without getting into an infinite loop. (The exception to this rule are GUI components using Qt: Qt insists that its main event loop runs in the primary thread).

@verbatim
void
Component::stop()
@endverbatim
This is the other "hook" function called by the component container on component shutdown. Shutdown occurs when the process receives an interrupt signal, either either from the user who pressed Ctrl-C in the terminal or from the deployment service such as IceGrid Node.

@verbatim
    hydroutil::stopAndJoin( mainThread_ );
@endverbatim
This is a utility function which tells the main thread to stop and waits util the thread terminates (i.e. it "joins" it).

@section orca_doc_tutebrickwrite_mainthread_h mainthread.h

@code
#include <hydroutil/subsystemthread.h>
#include <orcaice/context.h>

namespace brick
{

class MainThread: public hydroutil::SubsystemThread
{       
public:
    MainThread( const orcaice::Context& context );

    virtual void walk();

private:
    orcaice::Context context_;
};

} // namespace
@endcode

@par Line by Line Walkthrough

@verbatim
#include <hydroutil/subsystemthread.h>
#include <orcaice/context.h>
@endverbatim
Definitions of the hydroutil::SubsystemThread and orcaice::Context classes.

@verbatim
class MainThread: public hydroutil::SubsystemThread
@endverbatim
The one and only thread used by our component is derived from hydroutil::SubsystemThread class. This thread class derives from a basic hydroutil::Thread class and adds a bit of functionality to it. 

Firstly, it catches all common and uncommon exception which may originate in our code. This does not mean that we should not worry about exceptions because when SubsystemThread catches an exception it does not know what to do, so it just prints out a statement and waits for the component to shut down. This behavior is useful because, without this precaution, the program would simply seg fault and you wouldn't event know what happened. 

Secondly, this class simplifies usage of hydroutil::Status class by integrating functionality of hydroutil::SubStatus. Status can keep track of multiple @e subsystems which can be defined arbitrarily and are destinguished by a name. Typically, each thread is a subsystem. It can be in certain state and this state can be reported through the hydroutil::Status facility.

If something about the way hydroutil::SubsystemThread behaves doesn't suit your needs, you can always use the more general hydroutil::Thread.

@verbatim
public:
    MainThread( const orcaice::Context& context );
@endverbatim
The context described above is passed down to our thread by the component.

@verbatim
    virtual void walk();
@endverbatim
We implement the pure virtual function @c walk() defined in hydroutil::SubsystemThread. Function @c walk is the entry point of the thread, the thread execution happens in it. (The equivalent function in the more general hydroutil::Thread is called @c run(), i.e. walking is safer than running. :)

@verbatim
private:
    orcaice::Context context_;
};
@endverbatim
We will keep a copy of the context so we can use it throughout the life of the thread.

@section orca_doc_tutebrickwrite_mainthread_cpp mainthread.cpp

@code
#include <iostream>
#include <orcaice/orcaice.h>

#include "mainthread.h"

using namespace std;
using namespace brick;

MainThread::MainThread( const orcaice::Context& context ) :
    SubsystemThread( context.tracer(), context.status(), "MainThread" ),
    context_(context)
{
    subStatus().setMaxHeartbeatInterval( 20.0 );
}

void
MainThread::walk()
{
    orcaice::activate( context_, this, subsysName() );

    std::string prefix = context_.tag() + ".Config.";
    int sleepIntervalMs = orcaice::getPropertyAsIntWithDefault( context_.properties(),
            prefix+"SleepIntervalMs", 1000 );
    subStatus().ok( "Initialized" );
  
    subStatus().setMaxHeartbeatInterval( sleepIntervalMs * 3.0/1000.0 );
    subStatus().ok( "Running main loop" );

    context_.tracer().info( "Entering main loop" );
    while( !isStopping() )
    {
        context_.tracer()->debug( "Running main loop", 5 );
        context_.status()->heartbeat( "main" );

        // here we can do something useful

        IceUtil::ThreadControl::sleep(IceUtil::Time::milliSeconds(sleepIntervalMs));
    }
}
@endcode

@par Line by Line Walkthrough

@verbatim
MainThread::MainThread( const orcaice::Context& context ) :
    SubsystemThread( context.tracer(), context.status(), "MainThread" ),
    context_(context)
{
@endverbatim
A copy of the context is stored for future use. Note that the constructor is executed in the calling thread, in this case in the thread which created the component. We initialize SubsystemThread with the tracer and status objects contained in the context. We also name the subsystem corresponding to this thread. This name will be used for all status reporting.

@verbatim
    subStatus().setMaxHeartbeatInterval( 20.0 );
@endverbatim
The Status facility implements the heartbeat pattern. In this line we make a promiss to Status that we will update status information at least as often as every 20 seconds. This promiss will allow Status to raise an alarm if there's no update from this subsystem (thread) for longer than the specified interval.

Note that this line is equivalento to calling.
@verbatim
    context_.status().setMaxHeartbeatInterval( subsysName(), 20.0 );
@endverbatim
The simplified syntax is provided by SubsystemThread.

@verbatim
void
MainThread::walk()
{
@endverbatim
This is the entry point of the thread. Now we are running in our own thread. We get here after Thread::start() is called by the component.

Executing code in a separate thread usually means that we are responsible for catching all possible exceptions. We don't do it here because hydroutil::SubsystemThread does it for us.

@verbatim
    orcaice::activate( context_, this, subsysName() );
@endverbatim
We call a @ref orca_library_orcaice function to intialize the server capability of the component. (Technically, we are initializing the Ice::ObjectAdapter). 

The component does not perform this step automatically and leave it up to the designer because this is an important step and you may want to choose when to do it. For example you may want to setup all your required interfaces (i.e. clients) first and then enable the provided interfaces.

This operation may fail for various reasons. Common ones are: the network cable is unplugged, the Registry is unreachable. This standard function will try to activate indefinitely after sleeping for a few seconds. But we want to be able to get out of this infinite loop (e.g. with a Ctrl-C). For this reason, we supply this function with a pointer to a Thread (i.e. @c this = the pointer to this thread) so it can find out that it's time to stop. By the way, this is also the reason why orcaice::activate() should be called from a thread and not from Component::start().

@verbatim
    std::string prefix = context_.tag() + ".Config.";
    int sleepIntervalMs = orcaice::getPropertyAsIntWithDefault( context_.properties(),
            prefix+"SleepIntervalMs", 1000 );
@endverbatim
Reading in configuration parameters from the config file. All configuration properties start with the component tag, followed by a period and "Config" and another period. We form a string prefix by following this recipe. See the complete guide to @ref orca_doc_configfiles for more details.

This component has a single configuration parameter specifying the sleep interval within the main loop. It must be specified as an integer in milliseconds. See @ref orca_component_brick "Brick documentation" for the description of this config parameter.

We use a helper function from @ref orca_library_orcaice which returns an integer with default. The value is looked up in the property set available from the component context using the key "Brick.Config.SleepIntervalMs". If this property is absent in the config file, the default value of 1000ms = 1s is used.

Note that we should probably do more checks on the specified value, e.g. make sure that it is not negative.

@verbatim
    subStatus().ok( "Initialized" );
@endverbatim
When the SubsystemThread is created it automatically enters @e Initializing state. Now that initialization is complete we inform Status, the status is now @e Ok with a diagnostic string "Initialized". The other 2 possible status states are @e Warning and @e Fault.

@verbatim
    subStatus().setMaxHeartbeatInterval( sleepIntervalMs * 3.0/1000.0 );
@endverbatim
Initialization is complete and thread behavior becomes more predictable, we can now promiss to update Status more frequently.

@verbatim
    context_.tracer().info( "Entering main loop" );
@endverbatim
We use the tracer to let the user know what's going on. The hydroutil::Tracer defines several types of trace messages: info, warning, error, and debug. Each one can be forwarded to any number of destinations: display, network, log, or file. The default configuration is shown in the documentation. E.g. the default debug-to-display setting is 0, therefore this debug statement of level 2 will not be shown on the screen. In the next tutorial we will show how to change this setting.

@verbatim
    while( !isStopping() )
    {
@endverbatim
We are entering the main loop. It will execute until the thread is told to stop. After that the value returned by isStopping() function will become TRUE and we will exit from the loop.

@verbatim
        context_.tracer().debug( "Running main loop", 5 );
@endverbatim
The default debug-to-display setting is 0, therefore this debug statement of level 5 will not be shown on the screen. In the next tutorial we will show how to change this setting.

@verbatim
        subStatus().heartbeat();
@endverbatim
At every iteration of the loop, we call the heartbeat() function of the status object letting it know that this subsystem is not stuck.

@verbatim
        // here we can do something useful

        IceUtil::ThreadControl::sleep(IceUtil::Time::milliSeconds(sleepIntervalMs));
@endverbatim
Here we would actually perform some useful operations, e.g. read data from harware, perform computations, send messages over the network. Instead, this example component just sleeps for the amount of times specified in the config file. The sleep function provided by libIceUtil is cross-platform.

@verbatim
    }
}
@endverbatim
When the component is told to stop (by calling Component::stop() function), it will tell all of its threads to stop (by calling the Thread::stop() function). After this, the return value of Thread::isStopping() will change to TRUE, we will drop out from the main loop and exit from walk(). The thread will self-destruct and at this point the the main thread "joins" this one.



@section orca_doc_tutebrickwrite_brick_def brick.def

@code
DefaultComponentTag=Brick

# Provided Interfaces
# none

# Required Interfaces
#none

# Component Configuration
Config.SleepIntervalMs.Default=1000
@endcode

@par Line by Line Walkthrough

@verbatim
DefaultComponentTag=Brick
@endverbatim
This component tag will be pre-pended to all component properties in the @c brick.cfg file.

@verbatim
# Provided Interfaces
# none

# Required Interfaces
#none
@endverbatim
This is a super-simple example, it has no (non-standard) provided or required interfaces. The following standard interfaces are automatically provided by @ref orca_library_orcaice : @ref orca_interface_home, @ref orca_interface_status, @ref orca_interface_tracer. These do not need to be specified here.

@verbatim
# Component Configuration
Config.SleepIntervalMs.Default=1000
@endverbatim
This will be translated into the following line of @c brick.cfg file "Brick.Config.SleepIntervalMs=1000"

@section orca_doc_tutebrickwrite_next What's Next?

When you are done, go to the next tutorial: @ref orca_doc_tutebrickrun.

*/
 