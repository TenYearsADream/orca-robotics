/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2008 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_tute_icebox Running components inside the IceBox server

@note Reviewed for release 2.13.0.

In this tutorial we will reproduce the setup of the @ref orca_doc_quickstart but now the @ref orca_component_laser2d component will run as a service inside the IceBox application server. The difference is that a @b single process is used to run the Laser2d component and IceStorm. Later you can run many components within one IceBox which has advantages with respect to performance and deployment.

@section orca_doc_tute_icebox_compile Compiling Services

Because IceBox services are not used by everyone, their compilation is disabled by default. To turn it on, use @c ccmake utitilty (or the GUI equivalent). Find the option is @c ORCA_BUILD_SERVICES, hit @c Enter to toggle, hit @c C to configure, then @c G to generate. Recompile and install.

@section orca_doc_tute_icebox_startup Start Up the Infrastructure

Make sure the IceGrid Registry is running and the IceStorm server is @b NOT (See @ref orca_doc_quickstart for instructions).

@section orca_doc_tute_icebox_talk Connect Two Components

First, copy default configuration files for the SickLaser and LaserMon components.
@verbatim
$ cd ~/sys; mkdir tuteicebox; cd tuteicebox
$ cp [ORCA-INSTALL]/share/orca/cfg/laser2d.cfg .
$ cp [ORCA-INSTALL]/share/orca/cfg/lasermon.cfg .
@endverbatim

Also, copy the IceBox configuration files for this tutorial, which are included with your Orca distribution.
@verbatim
$ cp [ORCA-SRC]/scripts/ice/icebox_laser.cfg .
$ cp [ORCA-SRC]/scripts/ice/icestorm.cfg .
$ mkdir stormdb
@endverbatim

@par The IceBox Server

The IceBox configuration file does not need to be modifed. It instructs the IceBox to first load the IceStorm service and then the Laser2d service. Both are configured to share a single instance of Communicator to speed up communication.

The laser config file needs to be changed to @c fake (simulated) operation (you can skip this step if you're connected to a real SICK laser).  Edit @c laser2d.cfg, and change the name of the driver library to @c 'libHydroLaserScanner2dFake.so' so it looks like this:

@verbatim
Laser2d.Config.DriverLib=libHydroLaserScanner2dFake.so
@endverbatim

@note Component service libraries must be in a place where the OS can found them. With standard Orca installation in Linux you have to add
Orca library location to the @c LD_LIBRARY_PATH. For example:
@verbatim
ORCA_INSTALL=/usr/local
export LD_LIBRARY_PATH=$ORCA_INSTALL/lib/orca:$LD_LIBRARY_PATH
@endverbatim

Start the IceBox. 

@verbatim
$ icebox --Ice.Config=icebox_laser.cfg
@endverbatim

@par The Client

Start a new shell, and fire up the LaserMon component (a laser monitor). No modifications are needed for its configuration file. Note that the name of the configuration file is not specified on the command line and it is assumed to be @c lasermon.cfg.

@verbatim
$ lasermon
@endverbatim

You should see the scans scroll by on the screen, just as in the @ref orca_doc_quickstart_startup tutorial. To stop the IceBox or the component, type @c Ctrl-C in the corresponding terminal window.

@section orca_doc_tute_icebox_next What's Next

If everything works, check out more @ref orca_doc_tutorials.

*/
