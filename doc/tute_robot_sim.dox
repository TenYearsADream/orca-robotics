/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2009 Ben Upcroft, Alex Makarenko
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_tute_stage A bigger system with Player/Stage simulator

@note Reviewed for release 2.7.0.

In this tutorial we will assemble a simple robotic system and connect it to the 2D Player/Stage simulator. The system diagram is shown below (IceGrid Registry and IceStorm are will be used but are not shown).

@image html doc_tute_stage.png

In this tutorial we will use components which have external dependencies.
- Player/Stage to simulate the robotic platform. Debian installation instructions for Player can be found in @ref orca_doc_installdebian. This tutorial was tested with Player/Stage version 2.0.4.
- Qt for the GUI. Debian installation instructions are found here @ref orca_doc_installdebian_qt


@section orca_doc_tute_stage_orca Starting Orca

Start IceGrid Registry and IceStorm server as described in the @ref orca_doc_quickstart. 

Create a new system directory and copy Orca sample files.
@verbatim
$ mkdir -p ~/sys/tutestage; cd ~/sys/tutestage
$ cp [ORCA_INSTALL]/cfg/laser2d.cfg ./
$ cp [ORCA_INSTALL]/cfg/robot2d.cfg ./
$ cp [ORCA_INSTALL]/cfg/faithlocaliser.cfg ./
$ cp [ORCA_INSTALL]/cfg/teleop.cfg ./
$ cp [ORCA_INSTALL]/cfg/ogmaploader.cfg ./
$ cp [ORCA_INSTALL]/cfg/orcaview2d.cfg ./
@endverbatim

In this tutorial we'll run 6 components. Each one will need a separate terminal. (Advanced: another option is to put all components into an application server called IceBox which runs them in a single process. See tutorial @ref orca_doc_tute_icebox.)

@section orca_doc_tute_stage_player Starting Player/Stage

Copy Stage sample files.
@verbatim
$ cp -r [STAGE-SRC]/worlds .
@endverbatim

To simplify our localization, we'll make Stage report a global position in this simple world. To do this you need to add @c "localization" property to the @c worlds/pioneer.inc file
@verbatim
define pioneer2dx position
(
  ...
  localization "gps"
  localization_origin [0 0 0]
)
@endverbatim

Start up the Stage simulator with the @e simple world.
@verbatim
$ player worlds/simple.cfg
@endverbatim

@section orca_doc_tute_stage_platform Platform components

@par Laser scanner

The @ref orca_component_laser2d component will use the Player driver and it needs to know that we are using the simulator. You have to modify the following lines of @c laser2d.cfg:
@verbatim
...
Laser2d.Config.NumberOfSamples=361
Laser2d.Config.DriverLib=libHydroLaserScanner2dPlayerClient.so
Laser2d.Config.PlayerClient.Driver=stage
...
@endverbatim

Now run the Laser2d component.
@verbatim
$ laser2d
@endverbatim
Check the Stage world window: you should see the laser scan after the @ref orca_component_laser2d component made the connection. Note that occasionally, Stage does not show the scan. A quick check to see whether it's working is to run @ref orca_component_lasermon component (as described in @ref orca_doc_quickstart).

@par Robot hardware

We're now going to set up the low level control to the actuators for the simulated robot using the @ref orca_component_robot2d component. The @c robot2d.cfg file is already configured the way we want it here, so simply run the component:

@verbatim
$ robot2d
@endverbatim

@par Localisation

To display the robot in the GUI we need a localisation component. Here we'll use the simplest one possible @ref orca_component_faithlocaliser which assumes that the odometry is flawless. Nothing needs to be done to the configuration file, so just start the componenet.
@verbatim
$ faithlocaliser
@endverbatim

@par Map of the world

To display the world in the GUI we'll use the @ref orca_component_ogmaploader component which loads an image file, converts it to a (static) occupancy grid map and serves it on demand to clients. In this case, we are using the same file which Stage is using to simulate the world. We edit the @c ogmaploader.cfg file as shown.
@verbatim
...
OgMapLoader.Config.MapFileName=./worlds/bitmaps/cave.png
OgMapLoader.Config.Negate=0
OgMapLoader.Config.Offset.Orientation=0.0
OgMapLoader.Config.Offset.X=-8.0
OgMapLoader.Config.Offset.Y=-8.0
OgMapLoader.Config.Size.X=16.0
OgMapLoader.Config.Size.Y=16.0
... 
@endverbatim
Start the component
@verbatim
$ ogmaploader
@endverbatim

@section orca_doc_tute_stage_gui View the world in the GUI
To view the world and the robot we use @ref orca_component_orcaview2d component. One line of the standard config file needs to be modified:
@verbatim
...
OrcaView2d.Config.Element.Detail01=localise2d@local/faithlocaliser
...
@endverbatim
Start the GUI component
@verbatim
$ orcaview2d
@endverbatim

You should now see the the simple world from stage. If it is partially off the screen, drag it with the left mouse button so that you can view the full world. Resize the view with the right mouse button. You should be able to see the robot and the laser scans.

@section orca_doc_tute_stage_keyboard Keyboard/Joystick Control 

To tell the robot to move we can use @ref orca_component_teleop component, the same way it was done in the @ref orca_doc_tute_teleop tutorial.
@verbatim
$ teleop
@endverbatim

As the robot moves through the world, compare the display of the OrcaView2d and the Stage world window: they should be identical.

@section orca_doc_tute_stage_orca_next What's Next

If everything works, check out more @ref orca_doc_tutorials.

*/
