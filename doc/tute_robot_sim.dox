/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Ben Upcroft, Alex Makarenko
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@page orca_doc_tute_stage Using Orca with Player/Stage simulator

@note Reviewed for release 2.1.0 and Player/Stage 2.0.2.

@section started Getting started
Before reading this document, you should familiarise yourself with: 
    - @ref orca_doc_getting : download, compile, install.
    - @ref orca_doc_quickstart : The Orca2 quick start guide.
    - Ch. 2 Ice Overview of the <a href="http://www.zeroc.com/download.html#doc" target="_blank">Ice manual</a>

- Note that you'll need <a href="http://playerstage.sourceforge.net/" target="_blank">Player/Stage</a> installed. Debian installation instructions are found here @ref orca_doc_installdebian. It's also useful to understand how Player/Stage work.

- You will also need QT for the GUI. Debian installation instructions are found here @ref orca_doc_installdebian_qt

@section orca_doc_tute_stage_starting Starting Up

Start IceGrid Registry and IceStorm server as described in the @ref orca_doc_quickstart

We'll be using sample configuration files which are distributed with Orca and Stage. As a general rule, you shouldn't work or run programs from the distribution. So we'll create a separate directory and copy config files into it. After going through the quickstart guide, you would have created a @c sys directory in which you keep your cfg files. Create a new directory for this tutorial and copy the required config files there.
@verbatim
$ cd ~/sys
$ mkdir tutestage
$ cd tutestage
$ cp -r [STAGE_SRC]/worlds ./
@endverbatim

We'll make Stage report a global position in this simple world. To do this you need to add @c "localization" property to the @c worlds/pioneer.inc file
@verbatim
define pioneer2dx position
(
...
localization "gps"
localization_origin [0 0 0]
)
@endverbatim

Start up the Stage simulator using the @c simple.cfg file.
@verbatim
$ player worlds/simple.cfg
@endverbatim

Now copy a few standard component configuration files distributed with Orca.
@verbatim
$ cd ~/sys/tutestage
$ cp [ORCA_INSTALL]/cfg/laser2d.cfg ./
$ cp [ORCA_INSTALL]/cfg/robot2d.cfg ./
$ cp [ORCA_INSTALL]/cfg/faithlocaliser.cfg ./
$ cp [ORCA_INSTALL]/cfg/teleop.cfg ./
$ cp [ORCA_INSTALL]/cfg/ogmaploader.cfg ./
$ cp [ORCA_INSTALL]/cfg/orcaview.cfg ./
@endverbatim

From here on in, each component will need a separate terminal. Another option is to put all components into an application server called IceBox which runs them in a single process. This is described in tutorial @ref orca_doc_tute_icebox.

@section laser Setting up the Laser on the Robot

The laser component needs to know that we're using stage. You have to modify two lines in @c laser2d.cfg:
@verbatim
...
Laser2d.Config.Driver=playerclient
Laser2d.Config.PlayerClient.Driver=stage
...
@endverbatim

Now run the Laser2d component.
@verbatim
$ laser2d
@endverbatim
Check the Stage world window: you should see the laser scan after the Laser2d component made the connection. A quick check to see whether it's working is to run lasermon (as described in @ref orca_doc_quickstart).

@section robot_control Robot driver

We're now going to set up the low level control to the actuators for the simulated robot using the Robot2d component. The @c robot2d.cfg file is already configured the way we want it here, so simply run the component:

@verbatim
$ robot2d
@endverbatim

@section localiser Localisation
To display the robot in the GUI we need a localisation component. Here we'll use the simplest one possible: @c FaithLocaliser which assumes porfect odometry. Nothing needs to be done to the @c .cfg file so just start the componenet.
@verbatim
$ faithlocaliser
@endverbatim

@section map Load the Map
To display the world in the GUI we'll use the @c OgMapLoader component which loads an image file, converts it to a (static) occupancy grid map and serves it on demand to clients. In this case, we are using the simple world from Stage so edit the @c ogmaploader.cfg file
@verbatim
...
OgMapLoader.Config.MapFileName=./worlds/bitmaps/cave.png
OgMapLoader.Config.Negate=0
OgMapLoader.Config.Origin.Orientation=0.0
OgMapLoader.Config.Origin.X=-8.0
OgMapLoader.Config.Origin.Y=-8.0
OgMapLoader.Config.Size.X=16.0
OgMapLoader.Config.Size.Y=16.0
... 
@endverbatim
Start the component
@verbatim
$ ogmaploader
@endverbatim

@section view View the World
To view the world and the robot we use @c orcaview2d. One line of the standard config file needs to be modified:
@verbatim
...
OrcaView2d.Requires.Localise2d.Proxy=localise2d@local/faithlocaliser
...
@endverbatim
Start the GUI component
@verbatim
$ orcaview2d
@endverbatim

You should now see the the simple world from stage. If it is partially off the screen, drag it with the left mouse button so that you can view the full world. You should be able to see the robot and the laser scans.

@section keyboard_control Keyboard/Joystick Control 
To tell the robot to move we can use the @c teleop component which allows us to send commands to the @c Robot2d component via keyboard or joystick.
@verbatim
$ teleop
@endverbatim

As the robot moves through the world, compare the display of the OrcaView and the Stage world window: they should be identical.

@section orca_doc_tute_direct_next What's Next

If everything works, check out more @ref orca_doc_tutorials.

*/
