function [timestamps, ranges, intensities] = parselaserdata( file )
%
% function [timestamps, ranges, intensities] = parselaserdata( file )
%
% Parses laser data from an ASCII-file generated by the Orca logrecorder
%
% Author: Tobias Kaupp
%
% Output:
%    timestamps = each row is a Unix timestamp
%    ranges = each row represents ranges [m] from a single scan
%    intensities = each row represents intensities [0->8] from a single scan
%

fid = fopen( file );
if ( fid == -1 )
    error(sprintf('Couldnt open file: %s\n',file));
end

% skip the header (RangeScannerDescription)
fgetl(fid);

% timestamp format
timestampFormat = '%f %f';

i=1;

while true
    % read time stamp
    timeTmp = fscanf(fid, timestampFormat, 2);

    % check if we have reached then of the file
    if size(timeTmp,1) ~= 2
        break;
    end
    
    timestamps(i,:) = timeTmp';
    
    % min range
    minRange = fscanf(fid, '%f', 1);
    % max range
    maxRange = fscanf(fid, '%f', 1);
    % field of view
    fov = fscanf(fid, '%f', 1);
    % start angle
    startAngle = fscanf(fid, '%f', 1);
    
    % number of readings in a scan
    numReadings = fscanf(fid, '%d', 1);

    % ranges and intensities format
    % only need to do this once
    if i==1    
        sequenceFormat = '%f ';
        fillString = '%f ';
        for j=1:numReadings-1
            sequenceFormat = [sequenceFormat fillString];
        end
    end
    
    % read ranges
    rangesTmp = fscanf(fid, sequenceFormat, numReadings);
    ranges(i,:) = rangesTmp;

    % read intensities
    intensitiesTmp = fscanf(fid, sequenceFormat, numReadings);
    intensities(i,:) = intensitiesTmp;

    i=i+1;
    
end

fclose(fid);