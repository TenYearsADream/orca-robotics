// DOXYGEN CODE FOR COMPONENTS PAGE

/*!
        \mainpage
        \section compintro Introduction

  An Orca system consists of a set of interconnected components. The
  main rule of composing systems from Orca components is that there
  are no rules. Specifically, there's no component which every system
  must have. There no requirements on the number of components, or
  connection topology.  You don't have to reuse any existing
  components if you don't want to.

  At the same time, you should take a look at the existing components
  before writing your own.  One of the main objectives of Orca is
  software reuse, so give it a shot.  If some component is close to
  what you need but doesn't quite cut it, consider extending it,
  fixing it, begging the developer to do it for you, or whatever.  This
  page documents a set of re-useable components that are useful for
  quickly getting a working system running.

        \section complist Component List

  <a href="modules.html">Click here for the complete list of
  components</a> included in this distribution.

        \section legend How to Read Component Documentation?

  Most things are self-explanatory. Sometimes the documentation is intentionally brief
  to minimize the load on the developers. Common information is stated here once.

  - Configuration options. Here's a general pattern
    - configParameterName
     - Description of what it is and what it affects.
     - Units: very important!
     - Use: optional or required, if optional states default.
     - Constraints
         - type: integer, float, string, etc.
         - valid values:
             - e.g. positive, negative, greater than 18.
             - discrete values, e.g. "PI", "3.14", etc.
     - Example: samples, comments, explanations.

        \section add How to Add a New Component?

  Easy!  Say you want to add a new component named 'MyComponent'
    - Start
      - start from <code>orca2</code>
    - Write code
      - Create a directory called `mycomponent' in <code>src/components</code>
      - Write a <code>CMakeLists.txt</code> file and put it into
        <code>src/components/mycomponent</code> directory (copy and edit an existing one).
        - <a href="../../build_system.html">
          More information on Orca's build system is available here</a>.
    - Let CMake know about the new component so it can generate a <code>Makefile</code>
      - Edit the file <code>src/components/CMakeLists.txt</code> by adding the
        name of your component's directory to the array SUBDIRS.
    - Compile
      - At the top level run <code>cmake .; make</code>
      - Afterwards, you can run make in your component's directory (even if you edit your
        <code>CMakeLists.txt</code> file)
    - Get ready to run
      - Write a sample configuration
        <code>src/components/mycomponent/mycomponent.cfg</code>.
    - Document
      - Describe your component in a file
        <code>src/components/mycomponent/mycomponent.dox</code>. Read the next section
        for suggested format (also check out documentation for other components and examples).

          \section doc How to document your component?

Complete, accurate, and clear documentation is a prerequisite of code
reuse. Please think of documentation as an integral part of component
development. This section lists the absolute minimum of information
which you need to provide.

Describe your component in a file
<code>mycomponent/mycomponent.dox</code> using Doxygen tags. Put the
image files you want to include into
<code>src/components/doc_images/</code>. To avoid conflicts with other
components, prepend the name of your component (or abreviation) to all
file names, eg. <code>mycomp_diagram.png</code>. Use only the file
names, do not add any path information, it will be done automatically.

The sections listed below are highly recommended. A template is
provided in <code>src/components/comp_template.dox</code>.

- Development status
  - it is important to correctly set the expectations of potential users. SourceForge has the following
    categories {planning, pre-alpha, alpha, beta, mature, inactive}. Choose one of these and elaborate
    if necessary.
- Description
  - what does the component do
  - describe in words what services your component requires and provided (these correspond to the client,
    server, and peer connections described in detail below).
  - an input/output diagram (UML is highly encouraged) which shows the same connections/services
- Provided Interfaces
  - which interfaces does the component provide
- Required Interfaces
  - which interfaces does the component require
- Dependencies
  - list external libraries required to compile and run and how to get them
- Configuration
  - what run-time configuration options are supported
  - what are the default values
  - if several inputs are possible, what takes precedence
  - list all configuration tags, provide example listing (using <code></code> tags).
- Performance
  - measured and/or estimated processing load and memory footprint
  - if possible provide a function of how processing/memory scales with the size of the data set, etc.
  - if experiments were performed, describe the setup in detail
  - if the component has been used in a "real" project, mention it too.
- References
  - if the component implements an algorithm and it is described in the literature, provide full
    references
  - same applies to other publications, e.g. experimental results, project descriptions, etc.
- Remarks
  - any other relevant information
  - e.g. to do list, known bugs, etc.
- Responsible developer
  - name and contact information



*/
