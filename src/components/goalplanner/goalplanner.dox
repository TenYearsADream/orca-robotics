/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@ingroup orca_components
@ingroup orca_apps
@ingroup orca_services
@ingroup orca_cpp
@ingroup orca_linux
@ingroup orca_qnx
@ingroup orca_win
@defgroup orca_component_goalplanner GoalPlanner
@brief Plans a path from where you are now to a goal
 
The goalplanner plans a path from the current position of a robot to a global world coordinate (or a series of coordinates - a coarse path). It currently uses @ref orca_component_pathplanner for planning. It sends the resulting fine path to a local navigator, e.g. @ref orca_component_localnav.

@par Provides

- @ref orca_interface_home
- @ref orca_interface_status
- @ref orca_interface_pathfollower2d [GoalPlanner.Provides.PathFollower2d]

@par Requires

- @ref orca_interface_localise2d [GoalPlanner.Requires.Localise2d]
- @ref orca_interface_pathfollower2d [GoalPlanner.Requires.PathFollower2d]
- @ref orca_interface_pathplanner2d [GoalPlanner.Requires.PathPlanner2d]

@image html goalplanner.png

@par Operation

GoalPlanner acts as a proxy for another PathFollower2d interface.  

You send it a path, it will consult with a PathPlanner2d interface to
add intermediate waypoints so that a local path planner can follow it.
The detailed path will then be forwarded to the lower-level
PathFollower2d.

If you ask it what path was set, it'll give you the detailed path.  If
you subscribe() to the interface, it'll actually subscribe you
directly to the low-level PathFollower2d interface.

The following happens in sequencential order in the mainloop:
- Wait for a "task" path which someone (e.g. @ref orca_util_orcaview2d ) sends via the provided PathFollower2d interface.
- Work out how long it takes to get to the first waypoint based on a straight-line distance and adjust times of the task path accordingly.
- Prepend the current position of the robot to the task path.
- Send task path to the pathplanner and wait for an answer.
- Send out resulting, fine-grained path through the required PathFollower2d interface.

@par Configuration

- @c GoalPlanner.Config.VelocityToFirstWaypoint (double) [m/s]
    - Velocity to reach the first waypoint from the current pose.
    - Default: 1.0

- @c GoalPlanner.Config.PathPlanTimeout (double) [s]
    - Flag an error if it takes longer than this many seconds for the path planner to return a result.
    - Default: 10.0

@par Authors
Tobias Kaupp, Alex Brooks

*/

