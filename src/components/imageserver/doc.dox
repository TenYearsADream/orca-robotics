/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2008 Tom Burdick, Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!
@ingroup orca_components
@ingroup orca_apps
@ingroup orca_services
@ingroup orca_cpp
@ingroup orca_linux
@ingroup orca_qnx
@ingroup orca_win
@defgroup orca_component_imageserver ImageServer
@brief An abstract component for image serving 

@par Provides

- @ref orca_interface_home
- @ref orca_interface_image [ImageServer.Provides.Image]
- @ref orca_interface_status

@par Requires

- none

@image html imageserver.png

@par Drivers

This component dynamically loads an implementation of a Hydro hardware interface hydrointerfaces::Image. You can also load your own implementation as long as the shared library is in the path. See Hydro documentation for the list of available drivers.

- @ref hydro_drivers_image

@par Configuration

- @c Image.Config.DriverLib (string)
    - Name of shared library containing the hardware driver
    - Valid values are at least: { 'libHydroImageFile.so', 'libHydroImageFake.so'}
    - Default: "libHydroImageFake.so"

Laser Settings
- @c Image.Config.ImageWidth (int) [pixels]
    - Valid Values: ImageWidth>0
- @c Image.Config.ImageHeight (int) [pixels]
    - Valid Values: ImageHeight>0

@see Individual drivers may have additional configuration parameters which are specified as ImageServer.Config.XXX. See driver documentation.

An example configuration file is installed into [ORCA-INSTALL-DIR]/share/orca/cfg/ directory.

@section Notes

This component uses the same driver interface that the CameraServer uses, in fact, any driver will work for both. If you need the extra description information that the camera server gives then please use that instead. The viewer and logger will work with either.

@section orca_component_imageserver_troubleshooting Troubleshooting

-# Ice is throwing the following exception
@verbatim
Ice::MemoryLimitException: protocol error: memory limit exceeded
@endverbatim
Ice has a default maximum object size that can be communicated between components of 1024 bytes. If the images from the camera exceed this limit you must add in the following extra configuration line to @b both the @c imageserver.cfg and @c icebox_icestorm.cfg files:
@verbatim
...
Ice.MessageSizeMax=3000
@endverbatim
Remember to add this line to all configuration files that will be communicating images. So if you're logging or replaying a log you will have to add this line to @c logrecorder.cfg and @c logplayer.cfg as well.


@par Authors

Alex Brooks, Tom Burdick, Tobias Kaupp, Alex Makarenko

*/

