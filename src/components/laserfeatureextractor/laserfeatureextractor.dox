/*!
@ingroup components
@ingroup apps
@ingroup services
@ingroup cppcomps
@ingroup linuxcomps
@defgroup orca_component_laserfeatureextractor LaserFeatureExtractor

@brief Extracts interesting features from laser scans (Status: beta) 

  The component receives features from laser scans, useful for navigation (eg a slamlocalizer requires such features)

  Types of features extracted:

  - reflectors: anything with high reflectivity
  - foreground points: things like poles or trees
  - corners: internal and external corners eg. of buildings
  - doors: gaps in walls of a certain width

@par Provides
- @ref orca_interface_polarfeature2d

@par Requires
- @ref orca_interface_laser

@par Configuration

  The configuration documentation is split into sections for each feature type

  - Reflectors
    - ExtractReflectors
      - boolean
      - default: true
    - BackgroundRangeGate
      - George/Stef, what does this do?
    - TargetRangeGate
      - float in metres
      - Minimum range to target to be considered as a point feature.
    - MinReturnNumber
      - integer
      - Minimum number of bright laser returns to be considered as a point feature.
    - MinBrightness
      - integer
      - minimum intensity value to be considered a feature
      - default: 1

  - Foreground Points
    - ExtractForegroundPoints
      - boolean
      - default: 0
    - MinForegroundWidth
      - float in metres
      - minimum width of poles/trees
    - MaxForegroundWidth
      - float in metres
      - maximum width of poles/trees
    - MinForegroundBackgroundSeparation
      - float in metres
      - how far the pole/tree must be from the background

  - Corners
    - ExtractCorners
      - boolean
      - default: 0
  - Doors
    - ExtractDoors
      - boolean
      - default: 0

@include components/laserfeatureextractor/laserfeatureextractor.cfg

@par Dependancies


@par Remarks

@par Responsible Developer
Alex Brooks (algorithm)
Tobias Kaupp (port from Orca1)

*/

