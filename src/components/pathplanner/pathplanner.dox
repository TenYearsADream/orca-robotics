/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2006 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!

@ingroup components
@ingroup apps
@ingroup services
@ingroup cpp
@ingroup linux
@defgroup orca_component_pathplanner PathPlanner
@brief Computes a path in a 2D occupancy grid map. 

The pathplanner acts like a service receiving tasks from third parties and returning a computed path in a 2D world represented by an occupancy grid map. An example for a third party is the @ref orca_component_pathplantester.

@par Provided Interfaces

- @ref orca_interface_home
- @ref orca_interface_status
- @ref orca_interface_pathplanner2d

@par Required Interfaces

- @ref orca_interface_ogmap

@par Drivers

- @b simplenav @ref orca_pathplanner_simplenav
- @b skeletonnav @ref orca_pathplanner_skeletonnav
- @b astar @ref orca_pathplanner_astar
- @b fake Useful for testing or if you don't have hardware or a simulator.

@par Configuration

- @c PathPlanner.Config.Driver (string)
    - Type of algorithm driver
    - Valid values: { 'simplenav', 'skeletonnav', 'astar', 'fake' }
    - Default: 'simplenav'

- @c PathPlanner.Config.TraversabilityThreshhold (double)
    - Everything below this threshhold is considered traversable, everything above is an obstacle
    - Valid values: [0.0;1.0]
    - Default: 0.3

- @c PathPlanner.Config.RobotDiameterMetres (double)
    - The robot's diameter including some safety distance
    - Unit: meters
    - Default: 0.8

- @c PathPlanner.Config.DoPathOptimization (bool)
    - Flag which determines whether an optimized path should be computed @ref orca_pathplanner_pathoptimization
    - Valid values: 0 or 1
    - Default: 0

An example configuration file is installed into [ORCA-INSTALL-DIR]/cfg/ directory.

@section orca_pathplanner_simplenav Simple navigation
This algorithm is described in Latombe, "Robot Motion Planning", sec. 4.2.1. It is a simple grid-potential based method using wavefront propagation. We added the consideration of the robot platform's size.

@section orca_pathplanner_skeletonnav Skeleton navigation
This algorithm is described in Latombe, "Robot Motion Planning", sec. 4.2.2. It computes an improved numverical navigation function by first extracting a skeleton.

@section orca_pathplanner_pathoptimization Path optimization algorithm
This algorithm takes a fine-grained path and tries to find shortcuts by raytracing between waypoints. If no obstacle is in the way it will discard all the waypoints in between. The path it computes contains much fewer waypoints than the original path. A negative side-effect is that the path gets close to the walls but the local navigation should take care of this.

@section orca_pathplanner_astar A* search
This driver uses the famous A* search algorithm to guarantee the shortest path from start to goal. The heuristic takes diagonal traversing into account. Original implementation was done by Pham Ngoc Hai (h dot pham at acfr.usyd.edu.au). This is the fastest of all algorithms and useful if you know where your goal is gonna be.

@par Notes

Bibtex reference to the LaTombe book which contains the gridpotential-based algorithms (@ref orca_pathplanner_simplenav and @ref orca_pathplanner_skeletonnav):

@verbatim
@Book{latombe91robot,
  author    =    {Jean-Claude Latombe},
  title =        {Robot Motion Planning},
  publisher =    {Kluwer Academic Publishers},
  year =         {1991}
}
@endverbatim

@par To Do

@par Authors
Tobias Kaupp

*/

