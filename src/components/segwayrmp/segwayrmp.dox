/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!
@ingroup components
@ingroup apps
@ingroup services
@ingroup cpp
@ingroup linux
@ingroup qnx
@defgroup orca_component_segwayrmp SegwayRmp
@brief Controls Segway RMP: a two-wheeled balancing robot.

@par Provides

- @ref orca_interface_home
- @ref orca_interface_odometry2d [SegwayRmp.Provides.Odometry2d]
- @ref orca_interface_odometry3d [SegwayRmp.Provides.Odometry3d]
- @ref orca_interface_velocitycontrol2d [SegwayRmp.Provides.VelocityControl2d]
- @ref orca_interface_power [SegwayRmp.Provides.Power]
- @ref orca_interface_status
- @ref orca_interface_tracer

@par Requires

- none

@image html segwayrmp.png

@par Drivers

- @b segwayrmpusb @ref orca_segwayrmp_segwayrmpusb
- @b playerclient @ref orca_segwayrmp_playerclient
- @b fake Useful for testing or if you don't have hardware or a simulator.

@par Configuration

General Parameters:

  - @c SegwayRmp.Config.Driver (string)
    - Type of hardware driver
    - Valid values: { 'segwayrmpusb', 'playerclient', 'fake' }
    - Default: 'segwayrmpusb'
    
  - @c SegwayRmp.Config.EnableMotion (bool)
    - Allow motion commands or not. Convinient for testing when you want to make sure that
      the platform will not move.
    - Default: 1
    
  - @c SegwayRmp.Config.Odometry2dPublishInterval (double) [s]
    - How often to send 2D odometry information to the IceStorm server
    - Valid values:
        - t<0 : send every new data point
        - t>0 : send approximately every t seconds
    - Default: 0.1 (10Hz)

  - @c SegwayRmp.Config.ProvideOdometry3d (bool)
    - Whether or not to update the Odometry3d interface
    - Default: 1

  - @c SegwayRmp.Config.Odometry3dPublishInterval (double) [s]
    - How often to send 3D odometry information to the IceStorm server (iff ProvideOdometry3d is set)
    - Valid values:
        - t<0 : send every new data point
        - t>0 : send approximately every t seconds
    - Default: 0.1 (10Hz)

  - @c SegwayRmp.Config.PowerPublishInterval (double) [s]
    - How often to send power information to the IceStorm server
    - Valid values:
        - t>0 : send approximately every t seconds
    - Default: 20.0

  - @c SegwayRmp.Config.StatusPublishInterval (double) [s]
    - How often to send status information to the IceStorm server
    - Valid values:
        - t>0 : send approximately every t seconds
    - Default: 60.0

  - @c SegwayRmp.Config.LogStats (bool)
    - Log statistics about the run before shutting down. Currently logs run time and distance travelled. The filename is determined by LogStatsFilename property.
    - Default: 1

  - @c SegwayRmp.Config.LogStatsFilename (string)
    - Name of the log file to which run statistics are saved (if LogStats is set to 1).
    - Default: 'segwayrmp-stats.txt'

Parameters describing vehicle (see orca::VehicleDescription for details)

  - @c SegwayRmp.Config.VehicleDescription.Control.Type (string)
    - valid values: 'VelocityDifferential'
    - Default: 'VelocityDifferential'

  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxForwardSpeed (m/s)
    - Default: 1.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxReverseSpeed (m/s)
    - valid values: must be same as forward speed.
    - Default: 1.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxTurnrate (deg/s)
    - Absolute max turnrate (assumed max turnrate at 0m/s)
    - Default: 45.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxTurnrate1ms (deg/s)
    - Max turnrate at 1m/s.  This param and MaxTurnrate together define a linear model,
      giving the max turnrate at any speed.
    - Default: 45.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxForwardAcceleration (m/s/s)
    - Default: 1.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxReverseAcceleration (m/s/s)
    - Default: 1.0
  - @c SegwayRmp.Config.VehicleDescription.Control.VelocityDifferential.MaxRotationalAcceleration (deg/s/s)
    - Default: 45.0
  - @c SegwayRmp.Config.VehicleDescription.PlatformToVehicleTransform (Frame3d) [m, deg]
    - Position of the vehicle's local coord system with respect to the platform's local coord system.
    - Format: x y z roll pitch yaw (space separated)
    - Default: 0.0 0.0 0.0  0.0 0.0 0.0
  - @c SegwayRmp.Config.VehicleDescription.Geometry.Type (string)
    - valid values: 'Cylindrical'
    - Default: 'Cylindrical'
  - @c SegwayRmp.Config.VehicleDescription.Geometry.Cylindrical.Radius (m)
    - Radius of the vehicle's bounding cylinder
    - Default: 0.25
  - @c SegwayRmp.Config.VehicleDescription.Geometry.Cylindrical.Height (m)
    - Height of the vehicle's bounding cylinder
    - Default: 1.0
  - @c SegwayRmp.Config.VehicleDescription.Geometry.Cylindrical.VehicleToGeometryTransform (Frame3d) [m, deg]
    - Position of the cylinder centre with respect to the vehicle's local coord system.
      (cylinder extends in +/- z direction from here)
    - Format: x y z roll pitch yaw (space separated)
    - Default: 0.0 0.0 0.0  0.0 0.0 0.0

An example configuration file is installed into [ORCA-INSTALL-DIR]/cfg/ directory.

@par Dependancies

None for the component. See driver sections below for individual driver dependencies.

@section orca_segwayrmp_segwayrmpusb Segway RMP USB driver

The @c segwayrmp driver provides control of a Segway RMP (Robotic Mobility Platform), which is an robotic version of the Segway HT (Human Transport), a kind of two-wheeled, self-balancing electric scooter. Because of its power, weight, height, and dynamics, the Segway RMP is a potentially dangerous machine.  Be @b very careful with it.

For safety, this Segway will stop (zero-out motion commands) if no new command has been received from the PC in the previous 400ms or so. This is done in Segway firmware and this component does not duplicate this functionality. Thus, if you want to continue moving at a constant velocity, you must continuously send your desired velocities to the Platform2d interface (@ref orca_component_teleop component does exactly that).

The implementation of @ref orca_interface_position3d interface does not integrate robot's motion in the vertical direction. The altitude (z coordinate) of is always reported as 0.0. 

@par Dependancies

The USB version of RMP uses a chip from Future Technology Devices Int. (FTDI). Following the Windows  demo software from Segway we use a high-level closed-source library from FTDI to communicate with their chip. The Linux and Windows versions of the library have a (nearly) identical API. On linux the library is called libftd2xx.so and it uses the standard low-level libusb.so.

Make sure libusb is installed. In Debian, the easiest is to install the developer package. It's likely that you already have the library and all this package will do is create a couple of symbolic links.
@verbatim
# apt-get install libusb-dev
@endverbatim

The Orca component has been tested with libftd2xx.so.0.4.10 and libusb-0.1.so.4.4.3 (these are the latest versions tested). Download the libftd2xx library from <a href="http://www.ftdichip.com/Drivers/D2XX.htm" target="_blank">www.ftdichip.com</a>. Untar and follow the installation instructions in README.dat file. Note an incorrect version number in several places and that the line to add to your @c fstab file depends on the distribution and kernel number. The following has been tested in Debian, kernels 2.6.12 and 2.6.15.
@verbatim
none            /proc/bus/usb   usbfs   defaults,devmode=0666   0       0
@endverbatim

In addition, copy the header files provided with the distribution to a standard place, e.g.
@verbatim
# cp ftd2xx.h WinTypes.h /usr/local/include/.
@endverbatim

On some systems, an additional symbolic link needs to be created for shared libraries to load properly. You'll see an error message at runtime that contains "libftd2xx.so.0: cannot open shared object file".
@verbatim
# ln -s /usr/local/lib/libftd2xx.so.0.4.10 /usr/lib/libftd2xx.so.0
@endverbatim

As usual, make sure that both Linux and CMake detect the changes
@verbatim
# ldconfig
$ rm CMakeCache.txt
$ cmake .
@endverbatim

You should see the following line in CMake output:
@verbatim
    USB Driver for Segway RMP - can be built
@endverbatim

@par Extra configuration

- @c SegwayRmp.Config.SegwayRmpUsb.GainSchedule (string)
    - Choice of the gain schedule for the closed-loop controller in balanced mode
    - Valid values: { "normal", "tall", "heavy" }
    - Default: "normal"

- @c SegwayRmp.Config.SegwayRmpUsb.MaxVelocityScale (double)
    - Scaling factor applied to forward velocity.
    - Valid values: [0.0 .. 1.0]
    - Default: 0.75

- @c SegwayRmp.Config.SegwayRmpUsb.MaxTurnrateScale (double)
    - Scaling factor applied to yaw rate.
    - Valid values: [0.0 .. 1.0]
    - Default: 0.75

- @c SegwayRmp.Config.SegwayRmpUsb.MaxAccelerationScale (double)
    - Scaling factor applied to forward velocity.
    - Valid values: [0.0 .. 1.0]
    - Default: 0.75

- @c SegwayRmp.Config.SegwayRmpUsb.MaxCurrentLimitScale (double)
    - Scaling factor applied to forward velocity.
    - Valid values: [0.0 .. 1.0]
    - Default: 0.75

@section orca_segwayrmp_playerclient Player Client driver

This driver wraps up a Player client. It requires a running Player server. The driver gets data from that server and converts it into Orca format.More information on Player/Stage.

@par Dependancies

Requires that Player/Stage v.>=2.0 are installed and running. As Player itself, this driver is Linux only. See our notes on installing Player in platform-dependent installation page, e.g. @ref orca_doc_installdebian_player.

@par Extra configuration

- @c SegwayRmp.Config.PlayerClient.Host (string)
    - The host that Player (or Stage) is running on
    - Default: "localhost"
- @c SegwayRmp.Config.PlayerClient.Port (int)
    - The port that PLayer (or Stage) is running on
    - Constraints: >0
    - Default: 6665
    
Naturally, both real hardware and Stage simulator are supported. Support is limited to what Player supports which is currently the original RMP with CAN I/O using Kvaser, Inc.'s CANLIB interface library. This library provides access to CAN cards made by Kvaser, such as the LAPcan II.

@section internal Internal Structure

@image html segwayrmp_whitebox.png

The implementation of Platform2d interface can raise orca::DataNotExistException but does NOT raise orca::HardwareFailedException.

@par Authors

Orca component by Alex Makarenko & Alex Brooks. Original CAN driver code came from Player by Andrew Howard.

*/

