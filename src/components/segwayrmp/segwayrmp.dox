/*
 *  Orca-Base: Components for robotics.
 *
 *  Copyright (C) 2004
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!
@ingroup components
@ingroup apps
@ingroup services
@ingroup cppcomps
@ingroup linuxcomps
@defgroup orca_component_segwayrmp SegwayRmp
@brief Controls Segway RMP robot.

The segwayrmp driver provides control of a Segway RMP (Robotic
Mobility Platform), which is an experimental robotic version of the
Segway HT (Human Transport), a kind of two-wheeled, self-balancing
electric scooter.

@par Provides

- @ref orca_interface_platform2d
- @ref orca_interface_power

@par Requires

- none

@par Dependancies

None for the component. See driver section below for individual driver dependencies.

@par Notes

- Because of its power, weight, height, and dynamics, the Segway RMP is
a potentially dangerous machine.  Be @e very careful with it.

- Although the RMP does not actually support motor power control from 
software, for safety you must explicitly enable the motors using a
@p PLAYER_POSITION_MOTOR_POWER_REQ or @p PLAYER_POSITION3D_MOTOR_POWER_REQ
(depending on which interface you are using).  You must @e also enable
the motors in the command packet, by setting the @p state field to 1.

- For safety, this driver will stop the RMP (i.e., send zero velocities)
if no new command has been received from a client in the previous 400ms or so.
Thus, even if you want to continue moving at a constant velocity, you must
continuously send your desired velocities.

@par Authors
Orca component by Alex Makarenko. Original CAN driver code came from Player by Andrew Howard.

@section usb USB Driver

@par Dependancies

The USB version of RMP uses a chip from Future Technology Devices Int. (FTDI). Following the Windows  demo software from Segway we use a high-level closed-source library from FTDI to communicate with their chip. The Linux and Windows versions of the library have a (nearly) identical API. On linux the library is called libftd2xx.so and it uses the standard low-level libusb.so.

Make sure libusb is installed. In Debian, the easiest is to install the developer package. It's likely that you already have the library and all this package will do is create a couple of symbolic links.
@verbatim
# sudo apt-get install libusb-dev
@endverbatim

The Orca component has been tested with libftd2xx.so.0.4.5 and libusb-0.1.so.4.4.2. Download the libftd2xx library from <a href="http://ftdichip.com/Drivers/FT2232CDrivers.htm#D2XX">www.ftdichip.com</a>. Untar and follow the installation instructions in README.dat file. In addition, copy the header files provided with the distribution to a standard place, e.g.
@verbatim
# cp ftd2xx.h WinTypes.h /usr/local/include/.
@endverbatim

As usual, make sure that both Linux and CMake detect the changes
@verbatim
# ldconfig
$ rm CMakeCache.txt
$ cmake .
@endverbatim

Use should see the following line in CMake output:
@verbatim
    USB Driver for SegwayRMP - can be built
@endverbatim

@par Operation

To get the kernel to recognize the rmpusb for what it is on a 2.6 kernel, create '/etc/hotplug/usb/segwayrmp.usermap':

@verbatim
# SegwayRMP
segwayrmp   0x0003 0x0403 0xe729 0x0000 0x0000 0x00 0x00 0x00 0x00 0x00 0x00 0x00000000
@endverbatim

This causes the script '/etc/hotplug/usb/segwayrmp' to execute when the segway is plugged in.
One possibility is to set the permissions for the segway so non-root can write to it:

@verbatim
#!/bin/bash

if [ "$ACTION" = "add" ] && [ -f "$DEVICE" ]
then
    chmod a+w $DEVICE
fi

#echo "SegwayRMP device found" > /tmp/segwayrmp.txt
#echo "action: $ACTION" >> /tmp/segwayrmp.txt
#echo "device: $DEVICE" >> /tmp/segwayrmp.txt
#echo "group: $GROUP"   >> /tmp/segwayrmp.txt
@endverbatim

Finally, remember to 'chmod 755 /etc/hotplug/usb/segwayrmp'.

@section playerclient Player Client Driver

@note Not implemented yet, but will be sometime soon.

This one simply connects to a Player server.

Support is limited to what Player supports which is currently the original RMP with CAN I/O using Kvaser, Inc.'s CANLIB interface library. This library provides access
to CAN cards made by Kvaser, such as the LAPcan II.

@section confex Configuration Example

@include components/segwayrmp/segwayrmp.cfg


*/

