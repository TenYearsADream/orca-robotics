/*
 *  Orca-Base: Components for robotics.
 *
 *  Copyright (C) 2004
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

// Autogenerated by orcasmc which is based on smc by R. Martin.

#include <iostream>
#include "teleopfsm.h"

TeleopFsmActiveState TeleopFsm::ActiveState;
TeleopFsmIdleState TeleopFsm::IdleState;

// Missing transitions
void TeleopFsmState::interruptShutdown(TeleopFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("interruptShutdown", s.GetState().StateName());
}
void TeleopFsmState::humanShutdown(TeleopFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("humanShutdown", s.GetState().StateName());
}
void TeleopFsmState::startup(TeleopFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("startup", s.GetState().StateName());
}

// User-defined transitions
void TeleopFsmActiveState::interruptShutdown(TeleopFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(TeleopFsm::IdleState);
    s.interruptDeactivate();
}
void TeleopFsmActiveState::humanShutdown(TeleopFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(TeleopFsm::IdleState);
    s.humanDeactivate();
}
void TeleopFsmIdleState::startup(TeleopFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(TeleopFsm::ActiveState);
    s.activate();
}

// Base implementation of error handler
void TeleopFsm::fsmError(const char* t, const char* s)
{
    std::cerr<<"Transition error: "<<t<<" in state "<<s<<std::endl;
}
