/*
 *  Orca-Base: Components for robotics.
 *
 *  Copyright (C) 2004
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

// Autogenerated by orcasmc which is based on smc by R. Martin.

#ifndef ORCASMC_AUTOGEN_TELEOPFSM_FSM_H
#define ORCASMC_AUTOGEN_TELEOPFSM_FSM_H

#include <IceUtil/Mutex.h>

class TeleopFsm;

class TeleopFsmState 
{
public:
    virtual const char* StateName() const = 0;
    virtual void interruptShutdown(TeleopFsm& s);
    virtual void humanShutdown(TeleopFsm& s);
    virtual void startup(TeleopFsm& s);
};

class TeleopFsmActiveState : public TeleopFsmState 
{
public:
    virtual const char* StateName() const
        {return("Active");};
    virtual void interruptShutdown(TeleopFsm&);
    virtual void humanShutdown(TeleopFsm&);
};

class TeleopFsmIdleState : public TeleopFsmState 
{
public:
    virtual const char* StateName() const
        {return("Idle");};
    virtual void startup(TeleopFsm&);
};

// Human-written FSM should derive from this class
class TeleopFsm
{
    friend class TeleopFsmState;
    friend class TeleopFsmActiveState;
    friend class TeleopFsmIdleState;

public:
    // default constructor sets initial state
    TeleopFsm() : itsState(&IdleState) {};
    virtual ~TeleopFsm() {};

    // anybody can issue events to the FSM
    void interruptShutdown() {itsState->interruptShutdown(*this);}
    void humanShutdown() {itsState->humanShutdown(*this);}
    void startup() {itsState->startup(*this);}

protected:
    // Implement these actions in the derived class
    virtual void interruptDeactivate() = 0;
    virtual void humanDeactivate() = 0;
    virtual void activate() = 0;

    // Overwrite the base implementation if needed.
    virtual void fsmError(const char* t, const char* s);

private:
    TeleopFsmState* itsState;
    TeleopFsmState& GetState() const {return *itsState;};
    void SetState(TeleopFsmState& theState) {itsState=&theState;}
    IceUtil::Mutex mutex_;

    static TeleopFsmActiveState ActiveState;
    static TeleopFsmIdleState IdleState;
};

#endif
