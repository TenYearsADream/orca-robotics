/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!
@ingroup orca_examples
@ingroup orca_apps
@ingroup orca_python
@ingroup orca_linux
@defgroup orca_component_pureicepy PureIcePy
@brief An Orca components written in Python (plus python installation notes).

The examples inlude a single remote getData() call (puricepython.py), subscribing (pureicepythonsubscribe.py), plotting in 2D (pureicepythonplotranges.py) and 3D (pureicepythonplot3dranges.py).

@section orca_doc_pureicepy_installpython Python Installation
Note 1: These install notes have not been tested or checked so please be patient if trying this out.
Note 2: If python moves into mainstream Orca, this section should be moved to the main orca installation notes

Python can be used as a rapid prototyping tool and debug tool. It has many built-in and stable third party packages for things such as 2d/3d plotting (matplotlib), linear algebra and numerical routines (scipy), etc. Note that it's not intended to replace the C++ implementation of Orca but to augment it. To install python and the dependencies used in these examples type the following
@verbatim
# apt-get install python python-scipy python-matplotlib python-gtk2
@endverbatim

@section orca_doc_pureicepy_installicepythonfromsource Install the Python Mappings for Ice From Source 
Follow the instructions for installing Ice from source (@ref orca_doc_installdebian_icefromsource) but replace Ice-[VERSION] with IcePy-[VERSION]. 

Make sure that the installed Ice python scripts are in your path. You may want to add a snippet to your @c ~/.bashrc file similar to the one below. Replace [VERSION] with the version of IcePy you've just installed. Change the directory if you've modified the default install directory.
@verbatim
export ICEPY_HOME=/opt/IcePy-[VERSION]
export PYTHONPATH=$ICEPY_HOME/python:$PYTHONPATH
@endverbatim

@section orca_doc_pureicepy_generate_orca_python_interfaces Generate and Install the Orca Python Interfaces
Currently there is only the ability to generate python interfaces but there is no equivalent to libOrcaIce yet. Work is currently underway to wrap libOrcaIce using the boost.python wrapper. For now, if you want to use python, you must interface directly with the Ice API. Examples of Orca and python working together can be found in <ORCA_SRC>/src/examples/pureicepython and a tutorial can be found below @ref orca_doc_pureicepy_connecting_to_an_orca_interface

To generate the python interfaces you need to have installed python and you must turn on the BUILD_PYTHON parameter in cmake. The easiest way to do this is type "ccmake ." in the top level directory of the Orca source. Scroll down the list until the cursor is on the line for BUILD_PYTHON. Press "Enter" to turn it on. Configure and generate the make files. Then make and install orca:
@verbatim
$ make
# make install
@endverbatim

Make sure that the installed Orca python scripts are in your path. You may want to add a snippet to your @c ~/.bashrc file similar to the one below. Replace [VERSION] with the version of Orca you've just installed. Change the directory if you've modified the default install directory.
@verbatim
export PYTHONPATH=$ORCA2_HOME/python/orca:$PYTHONPATH
@endverbatim

<hr>

@section orca_doc_puricepython_component Pure Ice Python Component Examples

@par Provides

- none

@par Requires

- @ref orca_interface_laserscanner2d

Example code intended for component developers.


@section orca_doc_pureicepy_connecting_to_an_orca_interface Connecting to an Orca interface using the Python Ice API 

To test the pure ice python component, follow the directions of the @ref orca_doc_quickstart. After Laser2d is up and running, start the pureicepython example which will connect to the server, get a single laser scan, and exit. The following line must be executed from the build directory of pureicepython.

@verbatim
$ python pureicepython.py --Ice.Default.Locator='IceGrid/Locator:default -p 12000'
@endverbatim

Note that pureicepython does not use any configuration files. All connection parameters are hard-wired into the code, so you have to follow the directions of the tutorial exactly, otherwise it will not work.

You can use the same command for the other examples by replacing "puricepython" with "pureicepythonsubscribe", "pureicepythonplotranges", or "pureicepythonplot3dranges".

Note that the plotting examples are very inefficient. matplotlib (the plotting tool used in these examples) provides a more complicated way of just redrawing the bits that have changed. An example will be committed in the near future.

@section orca_doc_pureicepy_errors Errors
If you get errors like
@verbatim 
/opt/IcePy-3.2/python/Ice.py:34: RuntimeWarning: Python C API version mismatch for module IcePy: 
This Python has API version 1013, module IcePy has version 1012.
  import IcePy
python: Types.cpp:2975: PyObject* IcePy_defineException(PyObject*, PyObject*): 
Assertion `((type)->ob_type == &PyClass_Type)' failed.
Aborted
@endverbatim
You may need to use an older version of Python. Check the version by typing
@verbatim
$ python -V
@endverbatim
If it's Python 2.5, you'll need to change the symbolic link for python so it points to python 2.4:
@verbatim
# ln -s /usr/bin/python2.4 /usr/bin/python
@endverbatim


@par Author

Ben Upcroft

*/

