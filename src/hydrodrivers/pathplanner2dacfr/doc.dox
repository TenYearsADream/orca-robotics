/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2009 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This distribution is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!
@ingroup hydro_drivers_pathplanner2d
@ingroup hydro_cpp
@ingroup hydro_linux
@defgroup hydro_drivers_pathplanner2dacfr PathPlanner2dAcfr
@brief An implementation of several classic path-planning algorithms.

computePath() returns a vector of waypoints dependent on the selected algorithm.

@par Configuration

- @c Acfr.Algorithm (string)
  - Valid options: {"simplenav", "astar", "skeletonnav", "sparseskeletonnav" }
  - Default: "simplenav"
- @c Acfr.DoPathOptimization (bool)
  - Default: 0
- @c Acfr.TraversabilityThreshhold (double)
  - Default: 0.3
- @c Acfr.RobotDiameterMetres (double)
  - Units: meters
  - Default: 0.8

Additional configuration parameters for "skeletonnav" and "sparseskeletonnav" drivers:

- @c Acfr.Skeleton.Cost.DistanceThreshold (double)
  - Units: meters
  - Default: 0.8
- @c Acfr.Skeleton.Cost.CostMultiplier (double)
  - Default: 10

@par Dependencies.

- libHydroPathPlan

*/
