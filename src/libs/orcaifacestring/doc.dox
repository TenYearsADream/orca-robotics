/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2008 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */
/*!

@ingroup orca_libs
@defgroup orca_library_orcaifacestring libOrcaIfaceString
@brief Auto-generated library to stringify Orca Slice types.

Convenience library which provides toString() functions for all Orca Slice types. These functions are particularly useful for debugging when you want to dump the contents of the Orca data structure to cout.

These functions are autogenerated by @ref orca_util_slice2string, a special Orca utility which parses *.ice files and generates toString() functions. These functions are not hand-tuned in any way and therefore are quite verbose.

@section orca_library_orcaifacestring_overview Overview

For a full list of functions and classes see @ref ifacestring namespace documentation.

Header file:

You can include just the header file for the interface(s) you are planning to use (preferred method):
@verbatim
#include <orcaifacestring/laser2d.h>
@endverbatim

... or include one monster header file which supports all existing interfaces:

@verbatim
#include <orcaifacestring/orcaifacestring.h>
@endverbatim

@section orca_library_orcaifacestring_usage Usage

@verbatim
// C++
#include <orcaifacestring/datetime.h>
#include <iostream>

int main( int argc, char **argv )
{
    orca::Time obj;
    obj.seconds = 233232;
    obj.useconds = 35343;
    std::cout << ifacestring::toString( obj ) << std::endl;

    return 0;
}
@endverbatim

@par Responsible Developer
Alex Makarenko
  
*/

/*!
@namespace ifacestring
@brief Auto-generated library to stringify Orca Slice types.

This namespace is part of a library which provides toString() functions for all Orca Slice types.

@see @ref orca_library_orcaifacestring 
*/

