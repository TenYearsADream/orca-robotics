/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2009 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */
/*!

@ingroup orca_libs
@defgroup orca_library_orcalog libOrcaLog
@brief Basic definitions for Orca logging facilities.

@section overview Overview

A log consists of a master file and a set of log-files.  See @ref
orca_component_logrecorder for details.

The main classes in orcalog which support this are:

For log writing:

 - orcalog::MasterFileWriter  : knows how to write the master file.
 - orcalog::LogWriter         : base class for classes that know how to write individual log-files.
 - orcalog::AutoLogger        : base class for classes that continuously log received data (using a LogWriter)
 - orcalog::AutoLoggerFactory : base class for classes that create AutoLoggers

Similarly, for log reading:

 - orcalog::MasterFileReader  : knows how to read the master file.
 - orcalog::LogReader         : base class for classes that know how to read individual log-files.
 - orcalog::Replayer          : base class for classes that can replay data (using a LogReader)
 - orcalog::ReplayerFactory   : base class for classes that create Replayers

For a full list of functions and classes see @ref orcalog.

Header file:
@verbatim
#include <orcalog/orcalog.h>
@endverbatim

@see orca_component_logrecorder
@see orca_library_orcalogfactory

@par Responsible Developer
Alex Brooks, Alexei Makarenko, Tobias Kaupp
  
*/

/*!
@namespace orcalog
@brief Basic definitions for Orca logging facilities.

This namespace is part of a library which contains basic definitions for Orca logging facilities.

@see orca_library_orcalog
@see orca_component_logrecorder
@see orca_library_orcalogfactory

*/
