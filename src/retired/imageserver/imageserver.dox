/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2008 Alex Brooks, Ben Upcroft
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!
@ingroup orca_components
@ingroup orca_apps
@ingroup orca_services
@ingroup orca_cpp
@ingroup orca_linux
@defgroup orca_component_imageserver ImageServer
@brief A hardware abstraction component for grabbing images from either a FireWire or USB camera

@par Provides

- @ref orca_interface_camera [ImageServer.Provides.Camera]
- @ref orca_interface_home
- @ref orca_interface_status
- @ref orca_interface_tracer

@par Requires

- none

@image html imageserver.png

@par Drivers

- @b monoopencv @ref orca_component_imageserver_monoopencv
- @b digiclops @ref orca_component_imageserver_digiclops - NOTE: NOT VERY FUNCTIONAL YET
- @b fake Useful for testing or if you don't have hardware or a simulator.

@par Operation

This component encapsulates an image grabber for usb and firewire cameras. It can run either as a stand-alone component or an IceBox Service.

@see @ref orca_component_imageviewer

@par Configuration

- @c ImageServer.Config.Driver (string)
    - Which hardware driver to use?
    - Valid values: { "monoopencv", "fake", "digiclops" }
    - Default: "fake"

- @c ImageServer.Config.Format (string)
    - What format are the images? Most formats can be detected automatically so nothing is needed here. However, if images are Bayer encoded one of the following values need to be specified:
    - Valid values: { "BayerBg", "BayerGb", "BayerRg", "BayerGr" }
    - If a digiclops is being used you must specify either {"DigiclopsStereo", "DigiclopsRight", "DigiclopsBoth"}
    - "DigiclopsStereo" is used if a STEREO_IMAGE is being sent, "DigiclopsRight" for RIGHT_IMAGE and "DigiclopsBoth" for RIGHT_IMAGE and STEREO_IMAGE
    - Default: "ModeNfi"

- @c ImageServer.Config.Width (integer) [pixels]
    - Image width
    - Valid values: { "320, 640, 800, 1024, 1280, 1600" }. Height and width are checked for validity as a pair. Will return an error if the camera doesn't support this particuar width. Special value 0 (zero) causes the driver to query and use the camera's default image width.
    - Default: 0

- @c ImageServer.Config.Height (integer) [pixels]
    - Image height
    - Valid values: { "240, 480, 600, 768, 960, 1200"}. Height and width are checked for validity as a pair. Will return an error if the camera doesn't support this particuar height. Special value 0 (zero) causes the driver to query and use the camera's default image height.
    - Default: 0

  - @c ImageServer.Config.FrameRate (double)
    - Ben, what is it?
    - Valid values: ???
    - Default: 0.0

  - @c ImageServer.Config.CameraIndex (integer)
    - Index of the camera to be used (currently opencv supports up to 2 cameras at once)
    - Valid values: { "0, 1"} - will return an error if the index is less than 0 or greater than 1.
    - Default: "0": A value of 0 causes the driver to find the first available camera.

- @c ImageServer.Config.Offset (Frame3d) [m, deg]
    - Position of the laser with respect to the robot's local coordinate system.
    - Format: x y z roll pitch yaw (space separated)
    - Example: a laser mounted upside down with now translation: "0.0 0.0 0.0  180.0 0.0 0.0"
    - Default: 0.0 0.0 0.0  0.0 0.0 0.0

An example configuration file is installed into [ORCA-INSTALL-DIR]/share/orca/cfg/ directory.

Other examples for @c imageserver, @c imageviewer, @c logger, @c logplayer can be found at @ref orca_component_imageserver_examples

@section orca_component_imageserver_hardware Hardware

@par FireWire (IEEE 1394)

To use FireWire cameras (IEEE 1394) you need to install libdc1394. See @ref orca_component_imageserver_firewire.

To gain access to the hardware you have to have the right permissions. You can check which group you must belong to by checking who owns @c /dev/video1394 and @c /dev/raw1394. Under Debian these groups are @c video and @c disk respectively. Add yourself to those groups like this:
@verbatim
# adduser [username] video
# adduser [username] disk
@endverbatim
(You may have to re-login for the change to take effect).

If you have any troubles with not being able to grab images with a firewire camera, it may be the dc1394 libraries playing up. Try typing this and run the component again:
@verbatim
# renew_1394
@endverbatim

Also you could check that the hardware is functioning properly by running a GUI program called <a href="http://damien.douxchamps.net/ieee1394/coriander/index.php">Coriander</a>. 

@par USB

? What do we need?

@section orca_component_imageserver_monoopencv Monocular OpenCv Camera driver

Drives real camera hardware, directly connected to the computer. Uses
<a href="http://opencvlibrary.sourceforge.net" target="_blank">Opencv library</a>. 
See Dependencies below. A firewire camera or usb camera can be used. The opencv implementation
automatically finds the type of camera.

@par Dependencies

Requires <a href="http://opencvlibrary.sf.net" target="_blank">OpenCV library</a>. Latest tested version 1.0.0.

@note Recent compilation problems with opencv have been discovered due to python-dev and swig packages not being checked for by autoconf. If you are using Debian, please install the python2.3-dev package and the swig package. For other operating systems, please check that you have the headers for python installed in a standard system directory.

@verbatim
$ tar -xzf opencv-[VERSION].tar.gz
$ cd opencv-[VERSION]
$ ./configure --prefix=/opt/opencv-[VERSION]
$ make
# sudo make install
# ln -s /opt/opencv-[VERSION] /opt/opencv
@endverbatim

Add the following to your @c .bashrc file
@verbatim
export OPENCV_HOME=/opt/opencv
export LD_LIBRARY_PATH=#OPENCV_HOME/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/opencv/lib/pkgconfig
@endverbatim

Troubleshooting. 
- If you get a message about libtool unable to install something "to a directory not ending in /usr/local/lib", this probably means that you arem mixing configuration with and without a prefix. Just run "make clean" and reconfigure.
- If you get an error with `__stack_chk_fail_local', it's a probably a problem with g++-4.1. Recompile with g++-4.0.

@section orca_component_imageserver_digiclops Trinocular Digiclops Camera driver

@Note NOT VERY FUNCTIONAL YET. Will grab images (a digiclops STEREO_IMAGE only at the moment).

Drives a digiclops camera, directly connected to the computer. 

@par Dependencies

To access hardware, digiclops and triclops libraries must be installed. They are provided by the digiclops suppliers, <a href="http://www.ptgrey.com" target="_blank">Point Grey</a>. This code has been tested with Digiclops version 2.3.1.4-FC3 and Triclops version 3.2.0.8-FC3 on a Debian installation. The libraries must be installed either in @c /usr/lib or in @c /usr/local/lib. The associated header files must be in @c /usr/local/include/digiclops/ and @c /usr/local/include/triclops/. The easiest way to install these libraries and headers are to copy them from the original directory. 

For viewing, logging, and playing back logs (using @ref orca_component_imageviewer, @ref orca_component_logger, and @ref orca_component_logplayer respectively) you will also need the <a href="http://opencvlibrary.sf.net" target="_blank"> OpenCV library</a>. For our installation instructions see @ref orca_component_imageserver_monoopencv.


@section orca_component_imageserver_troubles Troubleshooting

-# Ice is throwing the following exception
@verbatim
IceUtil::Thread::run(): uncaught exception: TcpTransceiver.cpp:217: Ice::ConnectionLostException:
connection lost: recv() returned zero
@endverbatim
Ice has a default maximum object size that can be communicated between components of 1024 bytes. If the images from the camera exceed this limit you must add in the following extra configuration line to @b both the @c imageserver.cfg and @c icebox_icestorm.cfg files:
@verbatim
...
Ice.MessageSizeMax=3000
@endverbatim
Remember to add this line to all configuration files that will be communicating images. So if you're logging or replaying a log you will have to add this line to @c logger.cfg and @c logplayer.cfg as well.

@section orca_component_imageserver_performance Performance

This code has @b not been optimised and there are surely areas that can be fixed up. The numbers below were obtained for YUV images (640x480) grabbed from a Sony firewire camera capable of a framerate at 30Hz. The @c imageserver sent images to @c imageviewer on the same host but as stand-alone components. The tests were performed on a 1.5GHz Pentium M laptop.

- Delay = 30ms: The time for one image once it had been grabbed and before it was loaded as an orca object to the time just before the @c imageviewer displayed it on screen was on average 30ms.
   
- Throughput = 30Hz: The number of images per second arriving at @c imageviewer was 30.

- CPU usage (@c imageserver) = 20%: Measured using @c top . The CPU usage of @c icestorm was 20%.

The following performance figures were tested on a digiclops camera sending stereo images (an image from each camera):

- Throughput = 0.5Hz at 1024x768 resolution and 6Hz at 512x384 resolution

@section orca_component_imageserver_todo Todo

- The imagegrabber sublibrary should accept a camera index for specifying the particular camera to use on the firewire bus. At the moment the first camera found is used. 
- Add in fps user request
- Improve error handling
- Digiclops grabber is in its very early stages and much of the functionality in the digiclops and triclops libraries haven't been implemented yet.

@par Authors

Ben Upcroft

*/

