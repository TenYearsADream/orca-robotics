/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 *
 */

/*!
@ingroup orca_components
@ingroup orca_apps
@ingroup orca_services
@ingroup orca_cpp
@ingroup orca_linux
@ingroup orca_qnx
@defgroup orca_component_noisyrobot2d NoisyRobot2d
@brief A simple process-noise-adding filter

@par Provides

- @ref orca_interface_home
- @ref orca_interface_platform2d [NoisyRobot2d.Provides.MyPlatform]
- @ref orca_interface_status

@par Requires

- @ref orca_interface_platform2d [NoisyRobot2d.Requires.RealPlatform2d]

@image html noisyrobot2d.png

@par Operation

This component acts as a simple filter.  It passes information
directly to/from a real robot, but adds noise.

Specifically, it adds noise to the control inputs, and modifies the
odmoetry to mask the fact that control noise was added.

It uses multiplicative noise.  At regular intervals, it sames a new
rotational and linear multiplier from some distribution.
There are two options for this distribution:
  - uniform:
    - a uniform distribution in the range [ 1-noiseLevel, 1+noiseLevel ]
  - gaussian
    - a normal distribution with mean 1, standard deviation noiseLevel

The default behavious is to use a normal distribution, and sample new
multipliers every 10sec.  Although this breaks the usual assumptions
for probabilistic mapping/localisation (ie additive white gaussian
noise (AWGN)), it's probably closer to the noise provided by a real
robot: usually there is in fact some bias (eg due to one tyre being
less fully-inflated), but we just use more noise on the estimator to
cover up the fact that the noise isn't really AWG.  While this bias
would be constant for a real robot, sampling a new bias every
ConstantNoiseLevelTime seconds forces an estimator to deal with
different biases, as it would experience for different physical
robots.

@par Configuration

- @c NoisyRobot2d.Config.VelNoiseLevel (double)
    - Linear noise level
    - Default: 0.25

- @c NoisyRobot2d.Config.VelNoiseLevel (double)
    - Rotational noise level
    - Default: 0.35

- @c NoisyRobot2d.Config.NoiseLevelDistributionType (string)
    - Rotational noise level
    - Options: "uniform", "gaussian"
    - Default: "uniform"

- @c NoisyRobot2d.Config.ConstantNoiseLevelTime (double)
    - The implementation samples a noise level from the distribution, and holds it constant
      for ConstantNoiseLevelTime seconds.
    - Setting this to zero samples a new noise level on every command.
    - Default: 10.0


@par Authors

Alex Brooks

*/

