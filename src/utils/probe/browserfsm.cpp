/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp

 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 */

// Autogenerated by orcasmc which is based on smc by R. Martin.
// See http://www.objectmentor.com/resources/downloads/index.

#include <iostream>
#include "browserfsm.h"

BrowserFsmOperationState BrowserFsm::OperationState;
BrowserFsmInterfaceState BrowserFsm::InterfaceState;
BrowserFsmComponentState BrowserFsm::ComponentState;
BrowserFsmPlatformState BrowserFsm::PlatformState;
BrowserFsmRegistryState BrowserFsm::RegistryState;
BrowserFsmIdleState BrowserFsm::IdleState;

// Missing transitions
void BrowserFsmState::top(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("top", s.GetState().StateName());
}
void BrowserFsmState::up(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("up", s.GetState().StateName());
}
void BrowserFsmState::deactivate(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("deactivate", s.GetState().StateName());
}
void BrowserFsmState::fault(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("fault", s.GetState().StateName());
}
void BrowserFsmState::filter(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("filter", s.GetState().StateName());
}
void BrowserFsmState::reload(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("reload", s.GetState().StateName());
}
void BrowserFsmState::pick(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("pick", s.GetState().StateName());
}
void BrowserFsmState::activate(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("activate", s.GetState().StateName());
}

// User-defined transitions
void BrowserFsmOperationState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmOperationState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.showInterface();
}
void BrowserFsmOperationState::top(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.showRegistry();
}
void BrowserFsmOperationState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.showInterface();
}
void BrowserFsmOperationState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::OperationState);
    s.pickLastOperation();
    s.loadOperation();
    s.showOperation();
}
void BrowserFsmInterfaceState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmInterfaceState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.showComponent();
}
void BrowserFsmInterfaceState::top(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.showRegistry();
}
void BrowserFsmInterfaceState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.showComponent();
}
void BrowserFsmInterfaceState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.pickLastInterface();
    s.loadInterface();
    s.showInterface();
}
void BrowserFsmInterfaceState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::OperationState);
    s.loadOperation();
    s.showOperation();
}
void BrowserFsmComponentState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmComponentState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::PlatformState);
    s.showPlatform();
}
void BrowserFsmComponentState::top(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.showRegistry();
}
void BrowserFsmComponentState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::PlatformState);
    s.showPlatform();
}
void BrowserFsmComponentState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.pickLastComponent();
    s.loadComponent();
    s.showComponent();
}
void BrowserFsmComponentState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.loadInterface();
    s.showInterface();
}
void BrowserFsmPlatformState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmPlatformState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.showRegistry();
}
void BrowserFsmPlatformState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.showRegistry();
}
void BrowserFsmPlatformState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::PlatformState);
    s.pickLastPlatform();
    s.loadPlatform();
    s.showPlatform();
}
void BrowserFsmPlatformState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.loadComponent();
    s.showComponent();
}
void BrowserFsmRegistryState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmRegistryState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmRegistryState::filter(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.filterRegistry();
    s.showRegistry();
}
void BrowserFsmRegistryState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
    s.showRegistry();
}
void BrowserFsmRegistryState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::PlatformState);
    s.loadPlatform();
    s.showPlatform();
}
void BrowserFsmIdleState::activate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
    s.showRegistry();
}

// Base implementation of error handler
void BrowserFsm::fsmError(const char* t, const char* s)
{
    std::cerr<<"Transition error: "<<t<<" in state "<<s<<std::endl;
}
