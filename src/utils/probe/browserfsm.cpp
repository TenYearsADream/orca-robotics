/*
 *  Orca Project: Components for robotics.
 *
 *  Copyright (C) 2004-2006
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *  $Id$
 */

// Autogenerated by orcasmc which is based on smc by R. Martin.
// See http://www.objectmentor.com/resources/downloads/index.

#include <iostream>
#include "browserfsm.h"

BrowserFsmOperationState BrowserFsm::OperationState;
BrowserFsmInterfaceState BrowserFsm::InterfaceState;
BrowserFsmComponentState BrowserFsm::ComponentState;
BrowserFsmRegistryState BrowserFsm::RegistryState;
BrowserFsmIdleState BrowserFsm::IdleState;

// Missing transitions
void BrowserFsmState::up(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("up", s.GetState().StateName());
}
void BrowserFsmState::deactivate(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("deactivate", s.GetState().StateName());
}
void BrowserFsmState::fault(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("fault", s.GetState().StateName());
}
void BrowserFsmState::reload(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("reload", s.GetState().StateName());
}
void BrowserFsmState::pick(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("pick", s.GetState().StateName());
}
void BrowserFsmState::activate(BrowserFsm& s)
{
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.fsmError("activate", s.GetState().StateName());
}

// User-defined transitions
void BrowserFsmOperationState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmOperationState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.pickLastInterface();
    s.loadInterface();
}
void BrowserFsmOperationState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.pickLastInterface();
    s.loadInterface();
}
void BrowserFsmOperationState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::OperationState);
    s.pickLastOperation();
    s.loadOperation();
}
void BrowserFsmInterfaceState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmInterfaceState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.pickLastComponent();
    s.loadComponent();
}
void BrowserFsmInterfaceState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.pickLastComponent();
    s.loadComponent();
}
void BrowserFsmInterfaceState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.pickLastInterface();
    s.loadInterface();
}
void BrowserFsmInterfaceState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::OperationState);
    s.loadOperation();
}
void BrowserFsmComponentState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmComponentState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
}
void BrowserFsmComponentState::up(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
}
void BrowserFsmComponentState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.pickLastComponent();
    s.loadComponent();
}
void BrowserFsmComponentState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::InterfaceState);
    s.loadInterface();
}
void BrowserFsmRegistryState::deactivate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmRegistryState::fault(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::IdleState);
    s.quit();
}
void BrowserFsmRegistryState::reload(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
}
void BrowserFsmRegistryState::pick(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::ComponentState);
    s.loadComponent();
}
void BrowserFsmIdleState::activate(BrowserFsm& s) {
    IceUtil::Mutex::Lock lock(s.mutex_);
    s.SetState(BrowserFsm::RegistryState);
    s.loadRegistry();
}

// Base implementation of error handler
void BrowserFsm::fsmError(const char* t, const char* s)
{
    std::cerr<<"Transition error: "<<t<<" in state "<<s<<std::endl;
}
