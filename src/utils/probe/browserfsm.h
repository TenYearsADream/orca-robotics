/*
 * Orca Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2007 Alex Brooks, Alexei Makarenko, Tobias Kaupp

 * This copy of Orca is licensed to you under the terms described in the
 * ORCA_LICENSE file included in this distribution.
 */

// Autogenerated by orcasmc which is based on smc by R. Martin.
// See http://www.objectmentor.com/resources/downloads/index.

#ifndef ORCASMC_AUTOGEN_BROWSERFSM_FSM_H
#define ORCASMC_AUTOGEN_BROWSERFSM_FSM_H

#include <IceUtil/Mutex.h>

class BrowserFsm;

class BrowserFsmState 
{
public:
    virtual ~BrowserFsmState() {};
    virtual const char* StateName() const = 0;
    virtual void top(BrowserFsm& s);
    virtual void up(BrowserFsm& s);
    virtual void deactivate(BrowserFsm& s);
    virtual void fault(BrowserFsm& s);
    virtual void filter(BrowserFsm& s);
    virtual void reload(BrowserFsm& s);
    virtual void pick(BrowserFsm& s);
    virtual void activate(BrowserFsm& s);
};

class BrowserFsmOperationState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Operation");};
    virtual void deactivate(BrowserFsm&);
    virtual void fault(BrowserFsm&);
    virtual void top(BrowserFsm&);
    virtual void up(BrowserFsm&);
    virtual void reload(BrowserFsm&);
};

class BrowserFsmInterfaceState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Interface");};
    virtual void deactivate(BrowserFsm&);
    virtual void fault(BrowserFsm&);
    virtual void top(BrowserFsm&);
    virtual void up(BrowserFsm&);
    virtual void reload(BrowserFsm&);
    virtual void pick(BrowserFsm&);
};

class BrowserFsmComponentState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Component");};
    virtual void deactivate(BrowserFsm&);
    virtual void fault(BrowserFsm&);
    virtual void top(BrowserFsm&);
    virtual void up(BrowserFsm&);
    virtual void reload(BrowserFsm&);
    virtual void pick(BrowserFsm&);
};

class BrowserFsmPlatformState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Platform");};
    virtual void deactivate(BrowserFsm&);
    virtual void fault(BrowserFsm&);
    virtual void up(BrowserFsm&);
    virtual void reload(BrowserFsm&);
    virtual void pick(BrowserFsm&);
};

class BrowserFsmRegistryState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Registry");};
    virtual void deactivate(BrowserFsm&);
    virtual void fault(BrowserFsm&);
    virtual void filter(BrowserFsm&);
    virtual void reload(BrowserFsm&);
    virtual void pick(BrowserFsm&);
};

class BrowserFsmIdleState : public BrowserFsmState 
{
public:
    virtual const char* StateName() const
        {return("Idle");};
    virtual void activate(BrowserFsm&);
};

// Human-written FSM should derive from this class
class BrowserFsm
{
    friend class BrowserFsmState;
    friend class BrowserFsmOperationState;
    friend class BrowserFsmInterfaceState;
    friend class BrowserFsmComponentState;
    friend class BrowserFsmPlatformState;
    friend class BrowserFsmRegistryState;
    friend class BrowserFsmIdleState;

public:
    // default constructor sets initial state
    BrowserFsm() : itsState(&IdleState) {};
    virtual ~BrowserFsm() {};

    // anybody can issue events to the FSM
    void top() {itsState->top(*this);}
    void up() {itsState->up(*this);}
    void deactivate() {itsState->deactivate(*this);}
    void fault() {itsState->fault(*this);}
    void filter() {itsState->filter(*this);}
    void reload() {itsState->reload(*this);}
    void pick() {itsState->pick(*this);}
    void activate() {itsState->activate(*this);}

protected:
    // Implement these actions in the derived class
    virtual void pickLastOperation() = 0;
    virtual void pickLastInterface() = 0;
    virtual void showOperation() = 0;
    virtual void loadOperation() = 0;
    virtual void pickLastComponent() = 0;
    virtual void showInterface() = 0;
    virtual void loadInterface() = 0;
    virtual void pickLastPlatform() = 0;
    virtual void showComponent() = 0;
    virtual void loadComponent() = 0;
    virtual void quit() = 0;
    virtual void filterRegistry() = 0;
    virtual void showPlatform() = 0;
    virtual void loadPlatform() = 0;
    virtual void showRegistry() = 0;
    virtual void loadRegistry() = 0;

    // Overwrite the base implementation if needed.
    virtual void fsmError(const char* t, const char* s);

private:
    BrowserFsmState* itsState;
    BrowserFsmState& GetState() const {return *itsState;};
    void SetState(BrowserFsmState& theState) {itsState=&theState;}
    IceUtil::Mutex mutex_;

    static BrowserFsmOperationState OperationState;
    static BrowserFsmInterfaceState InterfaceState;
    static BrowserFsmComponentState ComponentState;
    static BrowserFsmPlatformState PlatformState;
    static BrowserFsmRegistryState RegistryState;
    static BrowserFsmIdleState IdleState;
};

#endif
