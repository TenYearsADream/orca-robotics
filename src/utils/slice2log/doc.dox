/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2004-2008 Alex Brooks, Alexei Makarenko, Tobias Kaupp
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

/*!
@ingroup orca_utils
@ingroup orca_linux
@defgroup orca_util_slice2log Slice2Log
@brief Generates functions for reading/writing ASCII logs from Slice definition files.

This utility is used for autogenerating code which is compiled into libOrcaIfaceLog.so 

@par Usage

@verbatim
$ slice2log <.ice file>
@endverbatim

@par Generated Functions

Slice2Log generates toLogStream() and fromLogStream() functions for every Slice-defined:
- Enum
- Struct
- Class
- Sequence
- Dictionary

The signature of the toLog() function is the same for all data types. E.g. for a data type @c Type in
Slice module @c module (e.g. orca), the generated function would have the following signature:

@verbatim
void toLogStream( const module::Type& obj, std::ostream& os );
void fromLogStream( module::Type& obj, std::istream& is );
@endverbatim

They can be used with std::[i/o]fstream (logging) or std::[i/o]stringstream (easier for testing) objects

@par Limitations

This tool is limited compared to slice2cpp.

- Not all types of objects can be used in private data types (i.e. structs, classes, sequences, dictionaries).  Specifically no Ice, IceStorm types, etc. are allowed. This limitation stems from the fact that we don't run @c slice2util on the Ice-supplied types.
    - Orca project: only Orca types are allowed.
    - Satellite projects: only Orca and project types are allowed.
- There is a limitation when working with derived classes. The following combination is not supported:
    - Holding a pointer to a base class, AND
    - The actual object is a derived class defined in a file different from the base class.

@author Alex Makarenko

*/

