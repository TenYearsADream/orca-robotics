/*
 * Orca-Robotics Project: Components for robotics 
 *               http://orca-robotics.sf.net/
 * Copyright (c) 2008 Alex Makarenko
 *
 * This copy of Orca is licensed to you under the terms described in
 * the LICENSE file included in this distribution.
 *
 */

#include "gen.h"
#include <Slice/CPlusPlusUtil.h>
// #include <IceUtil/Functional.h>
#include <IceUtil/Iterator.h>
#include <Slice/Checksum.h>

// #include <limits>
// #include <sys/stat.h>

using namespace std;
using namespace slice2string;
using namespace Slice;
#ifdef ICE_VERSION_33
using namespace IceUtilInternal;
#else
using namespace IceUtil;
#endif

namespace detail {

#ifdef ICE_VERSION_33
void printHeader( ::IceUtilInternal::Output& out )
#else
void printHeader( ::IceUtil::Output& out )
#endif
{
    out << "/*";
    out << "\n * Auto-generated by slice2string.";
    out << "\n * Do not modify or commit to source repository.";
    out << "\n */";
    out << "\n";
}

}

Gen::Gen(const string& name, const string& base, const string& headerExtension,
                const string& sourceExtension, const vector<string>& extraHeaders, const string& include,
                const vector<string>& includePaths, const string& dllExport, const string& dir,
                bool imp, bool checksum, bool stream, bool ice,
        // custom option
        const std::string& module) :
    _base(base),
    _headerExtension(headerExtension),
    _sourceExtension(sourceExtension),
    _extraHeaders(extraHeaders),
    _include(include),
    _includePaths(includePaths),
    _dllExport(dllExport),
    _impl(imp),
    _checksum(checksum),
    _stream(stream),
    _ice(ice),
    _module(module)
{
    for(vector<string>::iterator p = _includePaths.begin(); p != _includePaths.end(); ++p)
    {
        if(p->length() && (*p)[p->length() - 1] != '/')
        {
            *p += '/';
        }
    }

    string::size_type pos = _base.find_last_of("/\\");
    if(pos != string::npos)
    {
        _base.erase(0, pos + 1);
    }

    string fileH = _base + "." + _headerExtension;
    string fileC = _base + "." + _sourceExtension;
    if(!dir.empty())
    {
        fileH = dir + '/' + fileH;
        fileC = dir + '/' + fileC;
    }

    H.open(fileH.c_str());
    if(!H)
    {
        cerr << name << ": can't open `" << fileH << "' for writing" << endl;
        return;
    }
    
    C.open(fileC.c_str());
    if(!C)
    {
        cerr << name << ": can't open `" << fileC << "' for writing" << endl;
        return;
    }

    detail::printHeader(H);
    detail::printHeader(C);
    H << "\n// Generated from file `" << _base << ".ice'\n";
    C << "\n// Generated from file `" << _base << ".ice'\n";

    string s = fileH;
    if(_include.size())
    {
        s = _include + '/' + s;
    }
    transform(s.begin(), s.end(), s.begin(), ToIfdef());
    H << "\n#ifndef __" << s << "__";
    H << "\n#define __" << s << "__";
    H << '\n';
}

Gen::~Gen()
{
//     cout<<"DEBUG: Gen::~Gen()"<<endl;
//     H << nl << eb;
    H << "\n\n}";
    H << "\n\n#endif";
    H << '\n';

    C << '\n';
    C << "\n}";
    C << '\n';
}

bool
Gen::operator!() const
{
    if(!H || !C)
    {
        return true;
    }
    return false;
}

void
Gen::generate(const UnitPtr& p)
{    
//     cout<<"DEBUG: Gen::generate()"<<endl;
    writeExtraHeaders(C);

//     string lib_namespace = _module + "ifacestring";
    string lib_namespace = "ifacestring";
    string lib_dir = _module + "ifacestring";

    H << "\n#include <string>";
    H << "\n#include <" << _module << "/" << _base << ".h>";    
    // includeFiles contains full paths. we want just the base.
    StringList includes = p->includeFiles();
    for(StringList::const_iterator q = includes.begin(); q != includes.end(); ++q)
    { 
        // remove everything except the base
        string include_base = *q;
        string::size_type pos = include_base.find_last_of("/\\");
        if(pos != string::npos)
        {
            include_base.erase(0, pos + 1);
        }    
        if((pos = include_base.rfind('.')) != string::npos)
        {
            include_base.erase(pos);
        }
        // remove everything except the module
        string include_module = *q;
        string::size_type pos_mod = include_module.find_last_of("/\\");
        if(pos_mod != string::npos)
        {
            // remove base
            include_module.erase(pos_mod, string::npos);
            string::size_type pos_dir = include_module.find_last_of("/\\");
            if(pos_dir != string::npos) {
                // remove dir
                include_module.erase(0, pos_dir+1);
            }
        }    
        string include_namespace = include_module + "ifacestring";

        H << "\n#include <" << include_namespace << "/" << include_base << "." << _headerExtension << ">";
    }
    H << "\n";
    H << "\nnamespace " << lib_namespace;
    H << "\n{";
    H << "\n";

    C << "\n#include <" << lib_dir << "/" << _base << ".h>";
    C << "\n#include <gbxutilacfr/exceptions.h>";
    C << "\n#include <sstream>";
    C << "\n#include \"util.h\"";
    C << "\n";
    C << "\nusing namespace std;";
    C << "\n";
    C << "\nnamespace " << lib_namespace;
    C << "\n{";

    TypesVisitor typesVisitor(H, C, _dllExport, _stream);
    p->visit(&typesVisitor, false);
}

void
#ifdef ICE_VERSION_33
Gen::writeExtraHeaders(IceUtilInternal::Output& out)
#else
Gen::writeExtraHeaders(IceUtil::Output& out)
#endif
{
//     cout<<"DEBUG: Gen::writeExtraHeaders()"<<endl;
    for(vector<string>::const_iterator i = _extraHeaders.begin(); i != _extraHeaders.end(); ++i)
    {
        string hdr = *i;
        string guard;
        string::size_type pos = hdr.rfind(',');
        if(pos != string::npos)
        {
            hdr = i->substr(0, pos);
            guard = i->substr(pos + 1);
        }
        if(!guard.empty())
        {
            out << "\n#ifndef " << guard;
            out << "\n#define " << guard;
        }
        out << "\n#include <";
        if(!_include.empty())
        {
            out << _include << '/';
        }
        out << hdr << '>';
        if(!guard.empty())
        {
            out << "\n#endif";
        }
    }
}

Gen::TypesVisitor::TypesVisitor(Output& h, Output& c, const string& dllExport, bool stream) :
    H(h), C(c), _dllExport(dllExport), _stream(stream), _doneStaticSymbol(false), _useWstring(false)
{
}

bool
Gen::TypesVisitor::visitModuleStart(const ModulePtr& p)
{
//     cout<<"DEBUG: Gen::visitModuleStart()"<<endl;
//     _useWstring = setUseWstring(p, _useWstringHist, _useWstring);
//     H << sp << nl << "namespace " << name << nl << '{';
    return true;
}

void
Gen::TypesVisitor::visitModuleEnd(const ModulePtr& p)
{
//     H << sp << nl << '}';
//     _useWstring = resetUseWstring(_useWstringHist);
}

bool
Gen::TypesVisitor::visitClassDefStart(const ClassDefPtr& p)
{
//     cout<<"DEBUG: Gen::visitClassDefStart()"<<endl;
    if ( p->declaration()->isInterface() )
        return false;

    string name = fixKwd(p->name());
    string scope = fixKwd(p->scope());
    ClassList bases = p->bases();
    
    H << "\nstd::string toString( const " << scope.substr(2)<<name << "Ptr& obj, int recurse=1000, int expand=-1, int indent=0 );";

    C << "\n\nstring";
    C << nl << "toString( const " << scope.substr(2)<<name << "Ptr& objPtr, int recurse, int expand, int indent )";
    C << sb;
    C << nl << "string ind;";
    C << nl << "for ( int i=0; i<indent; ++i ) ind += ' ';";

    C << nl << "string s = \"class\";";
    C << nl << "if ( recurse>0 )";
    C << sb;

    ClassList::const_iterator q = bases.begin();
    if(!bases.empty()) {
        int count = 0;
        while(q != bases.end())
        {
            C << nl << fixKwd((*q)->scoped()) << "Ptr base" << count << "Ptr = objPtr;";
            C << nl << "s += \'\\n\' + ind + \"base \" + toString( base" << count << "Ptr, recurse, expand, indent+2 );";
            ++q;
            ++count;
        }
    }

    if ( !p->dataMembers().empty() ) {
        C << nl;
        C << nl << scope.substr(2)<<name << "& obj = *objPtr;";
    }
    return true;
}

void
Gen::TypesVisitor::visitClassDefEnd(const ClassDefPtr& p)
{
    C << eb;
    C << nl << "return s;";
    C << eb;
}

bool
Gen::TypesVisitor::visitExceptionStart(const ExceptionPtr& p)
{
    return false;
}

void
Gen::TypesVisitor::visitExceptionEnd(const ExceptionPtr& p)
{
}

void
Gen::TypesVisitor::visitEnum(const EnumPtr& p)
{
    string name = fixKwd(p->name());
    string scope = fixKwd(p->scope());
    EnumeratorList enumerators = p->getEnumerators();

    H << nl << "std::string toString( const " << scope.substr(2)<<name << ", int recurse=1000, int expand=-1, int indent=0 );";

    C << nl;
    C << nl << "string";
    C << nl << "toString( const " << scope.substr(2)<<name << " obj, int recurse, int expand, int indent )";
    C << sb;
    C << nl << "switch ( obj )";
    C << sb;

    EnumeratorList::const_iterator en = enumerators.begin();
    while(en != enumerators.end())
    {
        C << nl << "case " << scope.substr(2) << fixKwd((*en)->name()) << " :";
        C << nl << "\treturn \"" << fixKwd((*en)->name()) << "\";";
        ++en;
    }

    C << eb;
    C << nl << "ostringstream ss;";
    C << nl << "ss << \"Unknown case in enumerator " << scope.substr(2)<<name << ": \"<< ((int)obj);";
    C << nl << "throw gbxutilacfr::Exception( ERROR_INFO, ss.str() );";

    C << eb;
}

bool
Gen::TypesVisitor::visitStructStart(const StructPtr& p)
{
//     cout<<"DEBUG: Gen::visitStructStart()"<<endl;
    string name = fixKwd(p->name());
    string scope = fixKwd(p->scope());
    
    H << "\nstd::string toString( const " << scope.substr(2)<<name << "& obj, int recurse=1000, int expand=-1, int indent=0 );";

    C << "\n\nstring";
    C << nl << "toString( const " << scope.substr(2)<<name << "& obj, int recurse, int expand, int indent )";
    C << sb;
    C << nl << "string ind;";
    C << nl << "for ( int i=0; i<indent; ++i ) ind += ' ';";
    C << nl << "string s = \"struct\";";
    C << nl << "if ( recurse>0 )";
    C << sb;
    return true;
}

void
Gen::TypesVisitor::visitStructEnd(const StructPtr& p)
{       
    C << eb;
    C << nl << "return s;";
    C << eb;
}

void
Gen::TypesVisitor::visitDataMember(const DataMemberPtr& p)
{
//     cout<<"DEBUG: Gen::visitDataMember()"<<endl;
    string name = fixKwd(p->name());

    C << nl << "s += \'\\n\' + ind + \"" + name + " = \" + toString( obj." + name + ", recurse-1, expand, indent+2 );";
}

void
Gen::TypesVisitor::visitSequence(const SequencePtr& p)
{    
//     cout<<"DEBUG: Gen::visitSequence()"<<endl;
    string name = fixKwd(p->name());
    string scope = fixKwd(p->scope());

    H << nl << "std::string toString( const " << scope.substr(2)<<name << "& obj, int recurse=1000, int expand=-1, int indent=0 );";

    C << "\n\nstring";
    C << nl << "toString( const " << scope.substr(2)<<name << "& obj, int recurse, int expand, int indent )";
    C << sb;
    C << nl << "return seqToString< " << scope.substr(2)<<name << " >( obj, recurse-1, expand, indent+2 );";
    C << eb;
}

void
Gen::TypesVisitor::visitDictionary(const DictionaryPtr& p)
{
//     cout<<"DEBUG: Gen::visitDictionary()"<<endl;
    string name = fixKwd(p->name());
    string scope = fixKwd(p->scope());

    H << nl << "std::string toString( const " << scope.substr(2)<<name << "& obj, int recurse=1000, int expand=-1, int indent=0 );";

    C << nl;
    C << nl << "string";
    C << nl << "toString( const " << scope.substr(2)<<name << "& obj, int recurse, int expand, int indent )";
    C << sb;
    C << nl << "return dictToString< " << scope.substr(2)<<name << "," << scope.substr(2)<<name << "::const_iterator >( obj, recurse-1, expand, indent+2 );";
    C << eb;
}

void
Gen::TypesVisitor::visitConst(const ConstPtr& p)
{
}

void
Gen::TypesVisitor::emitUpcall(const ExceptionPtr& base, const string& call, bool isLocal)
{
    C.zeroIndent();
    C << nl << "#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug"; // COMPILERBUG
    C.restoreIndent();
    C << nl << (base ? fixKwd(base->name()) : string(isLocal ? "LocalException" : "UserException")) << call;
    C.zeroIndent();
    C << nl << "#else";
    C.restoreIndent();
    C << nl << (base ? fixKwd(base->scoped()) : string(isLocal ? "::Ice::LocalException" : "::Ice::UserException")) 
      << call;
    C.zeroIndent();
    C << nl << "#endif";
    C.restoreIndent();
}

bool
Gen::setUseWstring(ContainedPtr p, list<bool>& hist, bool use)
{
    hist.push_back(use);
    StringList metaData = p->getMetaData();
    if(find(metaData.begin(), metaData.end(), "cpp:type:wstring") != metaData.end())
    {
        use = true;
    }
    else if(find(metaData.begin(), metaData.end(), "cpp:type:string") != metaData.end())
    {
        use = false;
    }
    return use;
}

bool
Gen::resetUseWstring(list<bool>& hist)
{
    bool use = hist.back();
    hist.pop_back();
    return use;
}
